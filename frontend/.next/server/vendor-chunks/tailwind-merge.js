"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tailwind-merge";
exports.ids = ["vendor-chunks/tailwind-merge"];
exports.modules = {

/***/ "(ssr)/./node_modules/tailwind-merge/dist/bundle-mjs.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/tailwind-merge/dist/bundle-mjs.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTailwindMerge: () => (/* binding */ createTailwindMerge),\n/* harmony export */   extendTailwindMerge: () => (/* binding */ extendTailwindMerge),\n/* harmony export */   fromTheme: () => (/* binding */ fromTheme),\n/* harmony export */   getDefaultConfig: () => (/* binding */ getDefaultConfig),\n/* harmony export */   mergeConfigs: () => (/* binding */ mergeConfigs),\n/* harmony export */   twJoin: () => (/* binding */ twJoin),\n/* harmony export */   twMerge: () => (/* binding */ twMerge),\n/* harmony export */   validators: () => (/* binding */ validators)\n/* harmony export */ });\nconst CLASS_PART_SEPARATOR = '-';\r\nconst createClassGroupUtils = config => {\r\n  const classMap = createClassMap(config);\r\n  const {\r\n    conflictingClassGroups,\r\n    conflictingClassGroupModifiers\r\n  } = config;\r\n  const getClassGroupId = className => {\r\n    const classParts = className.split(CLASS_PART_SEPARATOR);\r\n    // Classes like `-inset-1` produce an empty string as first classPart. We assume that classes for negative values are used correctly and remove it from classParts.\r\n    if (classParts[0] === '' && classParts.length !== 1) {\r\n      classParts.shift();\r\n    }\r\n    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);\r\n  };\r\n  const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier) => {\r\n    const conflicts = conflictingClassGroups[classGroupId] || [];\r\n    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {\r\n      return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];\r\n    }\r\n    return conflicts;\r\n  };\r\n  return {\r\n    getClassGroupId,\r\n    getConflictingClassGroupIds\r\n  };\r\n};\r\nconst getGroupRecursive = (classParts, classPartObject) => {\r\n  if (classParts.length === 0) {\r\n    return classPartObject.classGroupId;\r\n  }\r\n  const currentClassPart = classParts[0];\r\n  const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);\r\n  const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : undefined;\r\n  if (classGroupFromNextClassPart) {\r\n    return classGroupFromNextClassPart;\r\n  }\r\n  if (classPartObject.validators.length === 0) {\r\n    return undefined;\r\n  }\r\n  const classRest = classParts.join(CLASS_PART_SEPARATOR);\r\n  return classPartObject.validators.find(({\r\n    validator\r\n  }) => validator(classRest))?.classGroupId;\r\n};\r\nconst arbitraryPropertyRegex = /^\\[(.+)\\]$/;\r\nconst getGroupIdForArbitraryProperty = className => {\r\n  if (arbitraryPropertyRegex.test(className)) {\r\n    const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];\r\n    const property = arbitraryPropertyClassName?.substring(0, arbitraryPropertyClassName.indexOf(':'));\r\n    if (property) {\r\n      // I use two dots here because one dot is used as prefix for class groups in plugins\r\n      return 'arbitrary..' + property;\r\n    }\r\n  }\r\n};\r\n/**\r\n * Exported for testing only\r\n */\r\nconst createClassMap = config => {\r\n  const {\r\n    theme,\r\n    classGroups\r\n  } = config;\r\n  const classMap = {\r\n    nextPart: new Map(),\r\n    validators: []\r\n  };\r\n  for (const classGroupId in classGroups) {\r\n    processClassesRecursively(classGroups[classGroupId], classMap, classGroupId, theme);\r\n  }\r\n  return classMap;\r\n};\r\nconst processClassesRecursively = (classGroup, classPartObject, classGroupId, theme) => {\r\n  classGroup.forEach(classDefinition => {\r\n    if (typeof classDefinition === 'string') {\r\n      const classPartObjectToEdit = classDefinition === '' ? classPartObject : getPart(classPartObject, classDefinition);\r\n      classPartObjectToEdit.classGroupId = classGroupId;\r\n      return;\r\n    }\r\n    if (typeof classDefinition === 'function') {\r\n      if (isThemeGetter(classDefinition)) {\r\n        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);\r\n        return;\r\n      }\r\n      classPartObject.validators.push({\r\n        validator: classDefinition,\r\n        classGroupId\r\n      });\r\n      return;\r\n    }\r\n    Object.entries(classDefinition).forEach(([key, classGroup]) => {\r\n      processClassesRecursively(classGroup, getPart(classPartObject, key), classGroupId, theme);\r\n    });\r\n  });\r\n};\r\nconst getPart = (classPartObject, path) => {\r\n  let currentClassPartObject = classPartObject;\r\n  path.split(CLASS_PART_SEPARATOR).forEach(pathPart => {\r\n    if (!currentClassPartObject.nextPart.has(pathPart)) {\r\n      currentClassPartObject.nextPart.set(pathPart, {\r\n        nextPart: new Map(),\r\n        validators: []\r\n      });\r\n    }\r\n    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);\r\n  });\r\n  return currentClassPartObject;\r\n};\r\nconst isThemeGetter = func => func.isThemeGetter;\r\n\r\n// LRU cache inspired from hashlru (https://github.com/dominictarr/hashlru/blob/v1.0.4/index.js) but object replaced with Map to improve performance\r\nconst createLruCache = maxCacheSize => {\r\n  if (maxCacheSize < 1) {\r\n    return {\r\n      get: () => undefined,\r\n      set: () => {}\r\n    };\r\n  }\r\n  let cacheSize = 0;\r\n  let cache = new Map();\r\n  let previousCache = new Map();\r\n  const update = (key, value) => {\r\n    cache.set(key, value);\r\n    cacheSize++;\r\n    if (cacheSize > maxCacheSize) {\r\n      cacheSize = 0;\r\n      previousCache = cache;\r\n      cache = new Map();\r\n    }\r\n  };\r\n  return {\r\n    get(key) {\r\n      let value = cache.get(key);\r\n      if (value !== undefined) {\r\n        return value;\r\n      }\r\n      if ((value = previousCache.get(key)) !== undefined) {\r\n        update(key, value);\r\n        return value;\r\n      }\r\n    },\r\n    set(key, value) {\r\n      if (cache.has(key)) {\r\n        cache.set(key, value);\r\n      } else {\r\n        update(key, value);\r\n      }\r\n    }\r\n  };\r\n};\r\nconst IMPORTANT_MODIFIER = '!';\r\nconst MODIFIER_SEPARATOR = ':';\r\nconst MODIFIER_SEPARATOR_LENGTH = MODIFIER_SEPARATOR.length;\r\nconst createParseClassName = config => {\r\n  const {\r\n    prefix,\r\n    experimentalParseClassName\r\n  } = config;\r\n  /**\r\n   * Parse class name into parts.\r\n   *\r\n   * Inspired by `splitAtTopLevelOnly` used in Tailwind CSS\r\n   * @see https://github.com/tailwindlabs/tailwindcss/blob/v3.2.2/src/util/splitAtTopLevelOnly.js\r\n   */\r\n  let parseClassName = className => {\r\n    const modifiers = [];\r\n    let bracketDepth = 0;\r\n    let parenDepth = 0;\r\n    let modifierStart = 0;\r\n    let postfixModifierPosition;\r\n    for (let index = 0; index < className.length; index++) {\r\n      let currentCharacter = className[index];\r\n      if (bracketDepth === 0 && parenDepth === 0) {\r\n        if (currentCharacter === MODIFIER_SEPARATOR) {\r\n          modifiers.push(className.slice(modifierStart, index));\r\n          modifierStart = index + MODIFIER_SEPARATOR_LENGTH;\r\n          continue;\r\n        }\r\n        if (currentCharacter === '/') {\r\n          postfixModifierPosition = index;\r\n          continue;\r\n        }\r\n      }\r\n      if (currentCharacter === '[') {\r\n        bracketDepth++;\r\n      } else if (currentCharacter === ']') {\r\n        bracketDepth--;\r\n      } else if (currentCharacter === '(') {\r\n        parenDepth++;\r\n      } else if (currentCharacter === ')') {\r\n        parenDepth--;\r\n      }\r\n    }\r\n    const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);\r\n    const baseClassName = stripImportantModifier(baseClassNameWithImportantModifier);\r\n    const hasImportantModifier = baseClassName !== baseClassNameWithImportantModifier;\r\n    const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : undefined;\r\n    return {\r\n      modifiers,\r\n      hasImportantModifier,\r\n      baseClassName,\r\n      maybePostfixModifierPosition\r\n    };\r\n  };\r\n  if (prefix) {\r\n    const fullPrefix = prefix + MODIFIER_SEPARATOR;\r\n    const parseClassNameOriginal = parseClassName;\r\n    parseClassName = className => className.startsWith(fullPrefix) ? parseClassNameOriginal(className.substring(fullPrefix.length)) : {\r\n      isExternal: true,\r\n      modifiers: [],\r\n      hasImportantModifier: false,\r\n      baseClassName: className,\r\n      maybePostfixModifierPosition: undefined\r\n    };\r\n  }\r\n  if (experimentalParseClassName) {\r\n    const parseClassNameOriginal = parseClassName;\r\n    parseClassName = className => experimentalParseClassName({\r\n      className,\r\n      parseClassName: parseClassNameOriginal\r\n    });\r\n  }\r\n  return parseClassName;\r\n};\r\nconst stripImportantModifier = baseClassName => {\r\n  if (baseClassName.endsWith(IMPORTANT_MODIFIER)) {\r\n    return baseClassName.substring(0, baseClassName.length - 1);\r\n  }\r\n  /**\r\n   * In Tailwind CSS v3 the important modifier was at the start of the base class name. This is still supported for legacy reasons.\r\n   * @see https://github.com/dcastil/tailwind-merge/issues/513#issuecomment-2614029864\r\n   */\r\n  if (baseClassName.startsWith(IMPORTANT_MODIFIER)) {\r\n    return baseClassName.substring(1);\r\n  }\r\n  return baseClassName;\r\n};\r\n\r\n/**\r\n * Sorts modifiers according to following schema:\r\n * - Predefined modifiers are sorted alphabetically\r\n * - When an arbitrary variant appears, it must be preserved which modifiers are before and after it\r\n */\r\nconst createSortModifiers = config => {\r\n  const orderSensitiveModifiers = Object.fromEntries(config.orderSensitiveModifiers.map(modifier => [modifier, true]));\r\n  const sortModifiers = modifiers => {\r\n    if (modifiers.length <= 1) {\r\n      return modifiers;\r\n    }\r\n    const sortedModifiers = [];\r\n    let unsortedModifiers = [];\r\n    modifiers.forEach(modifier => {\r\n      const isPositionSensitive = modifier[0] === '[' || orderSensitiveModifiers[modifier];\r\n      if (isPositionSensitive) {\r\n        sortedModifiers.push(...unsortedModifiers.sort(), modifier);\r\n        unsortedModifiers = [];\r\n      } else {\r\n        unsortedModifiers.push(modifier);\r\n      }\r\n    });\r\n    sortedModifiers.push(...unsortedModifiers.sort());\r\n    return sortedModifiers;\r\n  };\r\n  return sortModifiers;\r\n};\r\nconst createConfigUtils = config => ({\r\n  cache: createLruCache(config.cacheSize),\r\n  parseClassName: createParseClassName(config),\r\n  sortModifiers: createSortModifiers(config),\r\n  ...createClassGroupUtils(config)\r\n});\r\nconst SPLIT_CLASSES_REGEX = /\\s+/;\r\nconst mergeClassList = (classList, configUtils) => {\r\n  const {\r\n    parseClassName,\r\n    getClassGroupId,\r\n    getConflictingClassGroupIds,\r\n    sortModifiers\r\n  } = configUtils;\r\n  /**\r\n   * Set of classGroupIds in following format:\r\n   * `{importantModifier}{variantModifiers}{classGroupId}`\r\n   * @example 'float'\r\n   * @example 'hover:focus:bg-color'\r\n   * @example 'md:!pr'\r\n   */\r\n  const classGroupsInConflict = [];\r\n  const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);\r\n  let result = '';\r\n  for (let index = classNames.length - 1; index >= 0; index -= 1) {\r\n    const originalClassName = classNames[index];\r\n    const {\r\n      isExternal,\r\n      modifiers,\r\n      hasImportantModifier,\r\n      baseClassName,\r\n      maybePostfixModifierPosition\r\n    } = parseClassName(originalClassName);\r\n    if (isExternal) {\r\n      result = originalClassName + (result.length > 0 ? ' ' + result : result);\r\n      continue;\r\n    }\r\n    let hasPostfixModifier = !!maybePostfixModifierPosition;\r\n    let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);\r\n    if (!classGroupId) {\r\n      if (!hasPostfixModifier) {\r\n        // Not a Tailwind class\r\n        result = originalClassName + (result.length > 0 ? ' ' + result : result);\r\n        continue;\r\n      }\r\n      classGroupId = getClassGroupId(baseClassName);\r\n      if (!classGroupId) {\r\n        // Not a Tailwind class\r\n        result = originalClassName + (result.length > 0 ? ' ' + result : result);\r\n        continue;\r\n      }\r\n      hasPostfixModifier = false;\r\n    }\r\n    const variantModifier = sortModifiers(modifiers).join(':');\r\n    const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;\r\n    const classId = modifierId + classGroupId;\r\n    if (classGroupsInConflict.includes(classId)) {\r\n      // Tailwind class omitted due to conflict\r\n      continue;\r\n    }\r\n    classGroupsInConflict.push(classId);\r\n    const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);\r\n    for (let i = 0; i < conflictGroups.length; ++i) {\r\n      const group = conflictGroups[i];\r\n      classGroupsInConflict.push(modifierId + group);\r\n    }\r\n    // Tailwind class not in conflict\r\n    result = originalClassName + (result.length > 0 ? ' ' + result : result);\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * The code in this file is copied from https://github.com/lukeed/clsx and modified to suit the needs of tailwind-merge better.\r\n *\r\n * Specifically:\r\n * - Runtime code from https://github.com/lukeed/clsx/blob/v1.2.1/src/index.js\r\n * - TypeScript types from https://github.com/lukeed/clsx/blob/v1.2.1/clsx.d.ts\r\n *\r\n * Original code has MIT license: Copyright (c) Luke Edwards <luke.edwards05@gmail.com> (lukeed.com)\r\n */\r\nfunction twJoin() {\r\n  let index = 0;\r\n  let argument;\r\n  let resolvedValue;\r\n  let string = '';\r\n  while (index < arguments.length) {\r\n    if (argument = arguments[index++]) {\r\n      if (resolvedValue = toValue(argument)) {\r\n        string && (string += ' ');\r\n        string += resolvedValue;\r\n      }\r\n    }\r\n  }\r\n  return string;\r\n}\r\nconst toValue = mix => {\r\n  if (typeof mix === 'string') {\r\n    return mix;\r\n  }\r\n  let resolvedValue;\r\n  let string = '';\r\n  for (let k = 0; k < mix.length; k++) {\r\n    if (mix[k]) {\r\n      if (resolvedValue = toValue(mix[k])) {\r\n        string && (string += ' ');\r\n        string += resolvedValue;\r\n      }\r\n    }\r\n  }\r\n  return string;\r\n};\r\nfunction createTailwindMerge(createConfigFirst, ...createConfigRest) {\r\n  let configUtils;\r\n  let cacheGet;\r\n  let cacheSet;\r\n  let functionToCall = initTailwindMerge;\r\n  function initTailwindMerge(classList) {\r\n    const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());\r\n    configUtils = createConfigUtils(config);\r\n    cacheGet = configUtils.cache.get;\r\n    cacheSet = configUtils.cache.set;\r\n    functionToCall = tailwindMerge;\r\n    return tailwindMerge(classList);\r\n  }\r\n  function tailwindMerge(classList) {\r\n    const cachedResult = cacheGet(classList);\r\n    if (cachedResult) {\r\n      return cachedResult;\r\n    }\r\n    const result = mergeClassList(classList, configUtils);\r\n    cacheSet(classList, result);\r\n    return result;\r\n  }\r\n  return function callTailwindMerge() {\r\n    return functionToCall(twJoin.apply(null, arguments));\r\n  };\r\n}\r\nconst fromTheme = key => {\r\n  const themeGetter = theme => theme[key] || [];\r\n  themeGetter.isThemeGetter = true;\r\n  return themeGetter;\r\n};\r\nconst arbitraryValueRegex = /^\\[(?:(\\w[\\w-]*):)?(.+)\\]$/i;\r\nconst arbitraryVariableRegex = /^\\((?:(\\w[\\w-]*):)?(.+)\\)$/i;\r\nconst fractionRegex = /^\\d+\\/\\d+$/;\r\nconst tshirtUnitRegex = /^(\\d+(\\.\\d+)?)?(xs|sm|md|lg|xl)$/;\r\nconst lengthUnitRegex = /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\\b(calc|min|max|clamp)\\(.+\\)|^0$/;\r\nconst colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch)|color-mix)\\(.+\\)$/;\r\n// Shadow always begins with x and y offset separated by underscore optionally prepended by inset\r\nconst shadowRegex = /^(inset_)?-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/;\r\nconst imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\\(.+\\)$/;\r\nconst isFraction = value => fractionRegex.test(value);\r\nconst isNumber = value => !!value && !Number.isNaN(Number(value));\r\nconst isInteger = value => !!value && Number.isInteger(Number(value));\r\nconst isPercent = value => value.endsWith('%') && isNumber(value.slice(0, -1));\r\nconst isTshirtSize = value => tshirtUnitRegex.test(value);\r\nconst isAny = () => true;\r\nconst isLengthOnly = value =>\r\n// `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.\r\n// For example, `hsl(0 0% 0%)` would be classified as a length without this check.\r\n// I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.\r\nlengthUnitRegex.test(value) && !colorFunctionRegex.test(value);\r\nconst isNever = () => false;\r\nconst isShadow = value => shadowRegex.test(value);\r\nconst isImage = value => imageRegex.test(value);\r\nconst isAnyNonArbitrary = value => !isArbitraryValue(value) && !isArbitraryVariable(value);\r\nconst isArbitrarySize = value => getIsArbitraryValue(value, isLabelSize, isNever);\r\nconst isArbitraryValue = value => arbitraryValueRegex.test(value);\r\nconst isArbitraryLength = value => getIsArbitraryValue(value, isLabelLength, isLengthOnly);\r\nconst isArbitraryNumber = value => getIsArbitraryValue(value, isLabelNumber, isNumber);\r\nconst isArbitraryPosition = value => getIsArbitraryValue(value, isLabelPosition, isNever);\r\nconst isArbitraryImage = value => getIsArbitraryValue(value, isLabelImage, isImage);\r\nconst isArbitraryShadow = value => getIsArbitraryValue(value, isLabelShadow, isShadow);\r\nconst isArbitraryVariable = value => arbitraryVariableRegex.test(value);\r\nconst isArbitraryVariableLength = value => getIsArbitraryVariable(value, isLabelLength);\r\nconst isArbitraryVariableFamilyName = value => getIsArbitraryVariable(value, isLabelFamilyName);\r\nconst isArbitraryVariablePosition = value => getIsArbitraryVariable(value, isLabelPosition);\r\nconst isArbitraryVariableSize = value => getIsArbitraryVariable(value, isLabelSize);\r\nconst isArbitraryVariableImage = value => getIsArbitraryVariable(value, isLabelImage);\r\nconst isArbitraryVariableShadow = value => getIsArbitraryVariable(value, isLabelShadow, true);\r\n// Helpers\r\nconst getIsArbitraryValue = (value, testLabel, testValue) => {\r\n  const result = arbitraryValueRegex.exec(value);\r\n  if (result) {\r\n    if (result[1]) {\r\n      return testLabel(result[1]);\r\n    }\r\n    return testValue(result[2]);\r\n  }\r\n  return false;\r\n};\r\nconst getIsArbitraryVariable = (value, testLabel, shouldMatchNoLabel = false) => {\r\n  const result = arbitraryVariableRegex.exec(value);\r\n  if (result) {\r\n    if (result[1]) {\r\n      return testLabel(result[1]);\r\n    }\r\n    return shouldMatchNoLabel;\r\n  }\r\n  return false;\r\n};\r\n// Labels\r\nconst isLabelPosition = label => label === 'position' || label === 'percentage';\r\nconst isLabelImage = label => label === 'image' || label === 'url';\r\nconst isLabelSize = label => label === 'length' || label === 'size' || label === 'bg-size';\r\nconst isLabelLength = label => label === 'length';\r\nconst isLabelNumber = label => label === 'number';\r\nconst isLabelFamilyName = label => label === 'family-name';\r\nconst isLabelShadow = label => label === 'shadow';\r\nconst validators = /*#__PURE__*/Object.defineProperty({\r\n  __proto__: null,\r\n  isAny,\r\n  isAnyNonArbitrary,\r\n  isArbitraryImage,\r\n  isArbitraryLength,\r\n  isArbitraryNumber,\r\n  isArbitraryPosition,\r\n  isArbitraryShadow,\r\n  isArbitrarySize,\r\n  isArbitraryValue,\r\n  isArbitraryVariable,\r\n  isArbitraryVariableFamilyName,\r\n  isArbitraryVariableImage,\r\n  isArbitraryVariableLength,\r\n  isArbitraryVariablePosition,\r\n  isArbitraryVariableShadow,\r\n  isArbitraryVariableSize,\r\n  isFraction,\r\n  isInteger,\r\n  isNumber,\r\n  isPercent,\r\n  isTshirtSize\r\n}, Symbol.toStringTag, {\r\n  value: 'Module'\r\n});\r\nconst getDefaultConfig = () => {\r\n  /**\r\n   * Theme getters for theme variable namespaces\r\n   * @see https://tailwindcss.com/docs/theme#theme-variable-namespaces\r\n   */\r\n  /***/\r\n  const themeColor = fromTheme('color');\r\n  const themeFont = fromTheme('font');\r\n  const themeText = fromTheme('text');\r\n  const themeFontWeight = fromTheme('font-weight');\r\n  const themeTracking = fromTheme('tracking');\r\n  const themeLeading = fromTheme('leading');\r\n  const themeBreakpoint = fromTheme('breakpoint');\r\n  const themeContainer = fromTheme('container');\r\n  const themeSpacing = fromTheme('spacing');\r\n  const themeRadius = fromTheme('radius');\r\n  const themeShadow = fromTheme('shadow');\r\n  const themeInsetShadow = fromTheme('inset-shadow');\r\n  const themeTextShadow = fromTheme('text-shadow');\r\n  const themeDropShadow = fromTheme('drop-shadow');\r\n  const themeBlur = fromTheme('blur');\r\n  const themePerspective = fromTheme('perspective');\r\n  const themeAspect = fromTheme('aspect');\r\n  const themeEase = fromTheme('ease');\r\n  const themeAnimate = fromTheme('animate');\r\n  /**\r\n   * Helpers to avoid repeating the same scales\r\n   *\r\n   * We use functions that create a new array every time they're called instead of static arrays.\r\n   * This ensures that users who modify any scale by mutating the array (e.g. with `array.push(element)`) don't accidentally mutate arrays in other parts of the config.\r\n   */\r\n  /***/\r\n  const scaleBreak = () => ['auto', 'avoid', 'all', 'avoid-page', 'page', 'left', 'right', 'column'];\r\n  const scalePosition = () => ['center', 'top', 'bottom', 'left', 'right', 'top-left',\r\n  // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378\r\n  'left-top', 'top-right',\r\n  // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378\r\n  'right-top', 'bottom-right',\r\n  // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378\r\n  'right-bottom', 'bottom-left',\r\n  // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378\r\n  'left-bottom'];\r\n  const scalePositionWithArbitrary = () => [...scalePosition(), isArbitraryVariable, isArbitraryValue];\r\n  const scaleOverflow = () => ['auto', 'hidden', 'clip', 'visible', 'scroll'];\r\n  const scaleOverscroll = () => ['auto', 'contain', 'none'];\r\n  const scaleUnambiguousSpacing = () => [isArbitraryVariable, isArbitraryValue, themeSpacing];\r\n  const scaleInset = () => [isFraction, 'full', 'auto', ...scaleUnambiguousSpacing()];\r\n  const scaleGridTemplateColsRows = () => [isInteger, 'none', 'subgrid', isArbitraryVariable, isArbitraryValue];\r\n  const scaleGridColRowStartAndEnd = () => ['auto', {\r\n    span: ['full', isInteger, isArbitraryVariable, isArbitraryValue]\r\n  }, isInteger, isArbitraryVariable, isArbitraryValue];\r\n  const scaleGridColRowStartOrEnd = () => [isInteger, 'auto', isArbitraryVariable, isArbitraryValue];\r\n  const scaleGridAutoColsRows = () => ['auto', 'min', 'max', 'fr', isArbitraryVariable, isArbitraryValue];\r\n  const scaleAlignPrimaryAxis = () => ['start', 'end', 'center', 'between', 'around', 'evenly', 'stretch', 'baseline', 'center-safe', 'end-safe'];\r\n  const scaleAlignSecondaryAxis = () => ['start', 'end', 'center', 'stretch', 'center-safe', 'end-safe'];\r\n  const scaleMargin = () => ['auto', ...scaleUnambiguousSpacing()];\r\n  const scaleSizing = () => [isFraction, 'auto', 'full', 'dvw', 'dvh', 'lvw', 'lvh', 'svw', 'svh', 'min', 'max', 'fit', ...scaleUnambiguousSpacing()];\r\n  const scaleColor = () => [themeColor, isArbitraryVariable, isArbitraryValue];\r\n  const scaleBgPosition = () => [...scalePosition(), isArbitraryVariablePosition, isArbitraryPosition, {\r\n    position: [isArbitraryVariable, isArbitraryValue]\r\n  }];\r\n  const scaleBgRepeat = () => ['no-repeat', {\r\n    repeat: ['', 'x', 'y', 'space', 'round']\r\n  }];\r\n  const scaleBgSize = () => ['auto', 'cover', 'contain', isArbitraryVariableSize, isArbitrarySize, {\r\n    size: [isArbitraryVariable, isArbitraryValue]\r\n  }];\r\n  const scaleGradientStopPosition = () => [isPercent, isArbitraryVariableLength, isArbitraryLength];\r\n  const scaleRadius = () => [\r\n  // Deprecated since Tailwind CSS v4.0.0\r\n  '', 'none', 'full', themeRadius, isArbitraryVariable, isArbitraryValue];\r\n  const scaleBorderWidth = () => ['', isNumber, isArbitraryVariableLength, isArbitraryLength];\r\n  const scaleLineStyle = () => ['solid', 'dashed', 'dotted', 'double'];\r\n  const scaleBlendMode = () => ['normal', 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'color-dodge', 'color-burn', 'hard-light', 'soft-light', 'difference', 'exclusion', 'hue', 'saturation', 'color', 'luminosity'];\r\n  const scaleMaskImagePosition = () => [isNumber, isPercent, isArbitraryVariablePosition, isArbitraryPosition];\r\n  const scaleBlur = () => [\r\n  // Deprecated since Tailwind CSS v4.0.0\r\n  '', 'none', themeBlur, isArbitraryVariable, isArbitraryValue];\r\n  const scaleRotate = () => ['none', isNumber, isArbitraryVariable, isArbitraryValue];\r\n  const scaleScale = () => ['none', isNumber, isArbitraryVariable, isArbitraryValue];\r\n  const scaleSkew = () => [isNumber, isArbitraryVariable, isArbitraryValue];\r\n  const scaleTranslate = () => [isFraction, 'full', ...scaleUnambiguousSpacing()];\r\n  return {\r\n    cacheSize: 500,\r\n    theme: {\r\n      animate: ['spin', 'ping', 'pulse', 'bounce'],\r\n      aspect: ['video'],\r\n      blur: [isTshirtSize],\r\n      breakpoint: [isTshirtSize],\r\n      color: [isAny],\r\n      container: [isTshirtSize],\r\n      'drop-shadow': [isTshirtSize],\r\n      ease: ['in', 'out', 'in-out'],\r\n      font: [isAnyNonArbitrary],\r\n      'font-weight': ['thin', 'extralight', 'light', 'normal', 'medium', 'semibold', 'bold', 'extrabold', 'black'],\r\n      'inset-shadow': [isTshirtSize],\r\n      leading: ['none', 'tight', 'snug', 'normal', 'relaxed', 'loose'],\r\n      perspective: ['dramatic', 'near', 'normal', 'midrange', 'distant', 'none'],\r\n      radius: [isTshirtSize],\r\n      shadow: [isTshirtSize],\r\n      spacing: ['px', isNumber],\r\n      text: [isTshirtSize],\r\n      'text-shadow': [isTshirtSize],\r\n      tracking: ['tighter', 'tight', 'normal', 'wide', 'wider', 'widest']\r\n    },\r\n    classGroups: {\r\n      // --------------\r\n      // --- Layout ---\r\n      // --------------\r\n      /**\r\n       * Aspect Ratio\r\n       * @see https://tailwindcss.com/docs/aspect-ratio\r\n       */\r\n      aspect: [{\r\n        aspect: ['auto', 'square', isFraction, isArbitraryValue, isArbitraryVariable, themeAspect]\r\n      }],\r\n      /**\r\n       * Container\r\n       * @see https://tailwindcss.com/docs/container\r\n       * @deprecated since Tailwind CSS v4.0.0\r\n       */\r\n      container: ['container'],\r\n      /**\r\n       * Columns\r\n       * @see https://tailwindcss.com/docs/columns\r\n       */\r\n      columns: [{\r\n        columns: [isNumber, isArbitraryValue, isArbitraryVariable, themeContainer]\r\n      }],\r\n      /**\r\n       * Break After\r\n       * @see https://tailwindcss.com/docs/break-after\r\n       */\r\n      'break-after': [{\r\n        'break-after': scaleBreak()\r\n      }],\r\n      /**\r\n       * Break Before\r\n       * @see https://tailwindcss.com/docs/break-before\r\n       */\r\n      'break-before': [{\r\n        'break-before': scaleBreak()\r\n      }],\r\n      /**\r\n       * Break Inside\r\n       * @see https://tailwindcss.com/docs/break-inside\r\n       */\r\n      'break-inside': [{\r\n        'break-inside': ['auto', 'avoid', 'avoid-page', 'avoid-column']\r\n      }],\r\n      /**\r\n       * Box Decoration Break\r\n       * @see https://tailwindcss.com/docs/box-decoration-break\r\n       */\r\n      'box-decoration': [{\r\n        'box-decoration': ['slice', 'clone']\r\n      }],\r\n      /**\r\n       * Box Sizing\r\n       * @see https://tailwindcss.com/docs/box-sizing\r\n       */\r\n      box: [{\r\n        box: ['border', 'content']\r\n      }],\r\n      /**\r\n       * Display\r\n       * @see https://tailwindcss.com/docs/display\r\n       */\r\n      display: ['block', 'inline-block', 'inline', 'flex', 'inline-flex', 'table', 'inline-table', 'table-caption', 'table-cell', 'table-column', 'table-column-group', 'table-footer-group', 'table-header-group', 'table-row-group', 'table-row', 'flow-root', 'grid', 'inline-grid', 'contents', 'list-item', 'hidden'],\r\n      /**\r\n       * Screen Reader Only\r\n       * @see https://tailwindcss.com/docs/display#screen-reader-only\r\n       */\r\n      sr: ['sr-only', 'not-sr-only'],\r\n      /**\r\n       * Floats\r\n       * @see https://tailwindcss.com/docs/float\r\n       */\r\n      float: [{\r\n        float: ['right', 'left', 'none', 'start', 'end']\r\n      }],\r\n      /**\r\n       * Clear\r\n       * @see https://tailwindcss.com/docs/clear\r\n       */\r\n      clear: [{\r\n        clear: ['left', 'right', 'both', 'none', 'start', 'end']\r\n      }],\r\n      /**\r\n       * Isolation\r\n       * @see https://tailwindcss.com/docs/isolation\r\n       */\r\n      isolation: ['isolate', 'isolation-auto'],\r\n      /**\r\n       * Object Fit\r\n       * @see https://tailwindcss.com/docs/object-fit\r\n       */\r\n      'object-fit': [{\r\n        object: ['contain', 'cover', 'fill', 'none', 'scale-down']\r\n      }],\r\n      /**\r\n       * Object Position\r\n       * @see https://tailwindcss.com/docs/object-position\r\n       */\r\n      'object-position': [{\r\n        object: scalePositionWithArbitrary()\r\n      }],\r\n      /**\r\n       * Overflow\r\n       * @see https://tailwindcss.com/docs/overflow\r\n       */\r\n      overflow: [{\r\n        overflow: scaleOverflow()\r\n      }],\r\n      /**\r\n       * Overflow X\r\n       * @see https://tailwindcss.com/docs/overflow\r\n       */\r\n      'overflow-x': [{\r\n        'overflow-x': scaleOverflow()\r\n      }],\r\n      /**\r\n       * Overflow Y\r\n       * @see https://tailwindcss.com/docs/overflow\r\n       */\r\n      'overflow-y': [{\r\n        'overflow-y': scaleOverflow()\r\n      }],\r\n      /**\r\n       * Overscroll Behavior\r\n       * @see https://tailwindcss.com/docs/overscroll-behavior\r\n       */\r\n      overscroll: [{\r\n        overscroll: scaleOverscroll()\r\n      }],\r\n      /**\r\n       * Overscroll Behavior X\r\n       * @see https://tailwindcss.com/docs/overscroll-behavior\r\n       */\r\n      'overscroll-x': [{\r\n        'overscroll-x': scaleOverscroll()\r\n      }],\r\n      /**\r\n       * Overscroll Behavior Y\r\n       * @see https://tailwindcss.com/docs/overscroll-behavior\r\n       */\r\n      'overscroll-y': [{\r\n        'overscroll-y': scaleOverscroll()\r\n      }],\r\n      /**\r\n       * Position\r\n       * @see https://tailwindcss.com/docs/position\r\n       */\r\n      position: ['static', 'fixed', 'absolute', 'relative', 'sticky'],\r\n      /**\r\n       * Top / Right / Bottom / Left\r\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\r\n       */\r\n      inset: [{\r\n        inset: scaleInset()\r\n      }],\r\n      /**\r\n       * Right / Left\r\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\r\n       */\r\n      'inset-x': [{\r\n        'inset-x': scaleInset()\r\n      }],\r\n      /**\r\n       * Top / Bottom\r\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\r\n       */\r\n      'inset-y': [{\r\n        'inset-y': scaleInset()\r\n      }],\r\n      /**\r\n       * Start\r\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\r\n       */\r\n      start: [{\r\n        start: scaleInset()\r\n      }],\r\n      /**\r\n       * End\r\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\r\n       */\r\n      end: [{\r\n        end: scaleInset()\r\n      }],\r\n      /**\r\n       * Top\r\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\r\n       */\r\n      top: [{\r\n        top: scaleInset()\r\n      }],\r\n      /**\r\n       * Right\r\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\r\n       */\r\n      right: [{\r\n        right: scaleInset()\r\n      }],\r\n      /**\r\n       * Bottom\r\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\r\n       */\r\n      bottom: [{\r\n        bottom: scaleInset()\r\n      }],\r\n      /**\r\n       * Left\r\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\r\n       */\r\n      left: [{\r\n        left: scaleInset()\r\n      }],\r\n      /**\r\n       * Visibility\r\n       * @see https://tailwindcss.com/docs/visibility\r\n       */\r\n      visibility: ['visible', 'invisible', 'collapse'],\r\n      /**\r\n       * Z-Index\r\n       * @see https://tailwindcss.com/docs/z-index\r\n       */\r\n      z: [{\r\n        z: [isInteger, 'auto', isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      // ------------------------\r\n      // --- Flexbox and Grid ---\r\n      // ------------------------\r\n      /**\r\n       * Flex Basis\r\n       * @see https://tailwindcss.com/docs/flex-basis\r\n       */\r\n      basis: [{\r\n        basis: [isFraction, 'full', 'auto', themeContainer, ...scaleUnambiguousSpacing()]\r\n      }],\r\n      /**\r\n       * Flex Direction\r\n       * @see https://tailwindcss.com/docs/flex-direction\r\n       */\r\n      'flex-direction': [{\r\n        flex: ['row', 'row-reverse', 'col', 'col-reverse']\r\n      }],\r\n      /**\r\n       * Flex Wrap\r\n       * @see https://tailwindcss.com/docs/flex-wrap\r\n       */\r\n      'flex-wrap': [{\r\n        flex: ['nowrap', 'wrap', 'wrap-reverse']\r\n      }],\r\n      /**\r\n       * Flex\r\n       * @see https://tailwindcss.com/docs/flex\r\n       */\r\n      flex: [{\r\n        flex: [isNumber, isFraction, 'auto', 'initial', 'none', isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Flex Grow\r\n       * @see https://tailwindcss.com/docs/flex-grow\r\n       */\r\n      grow: [{\r\n        grow: ['', isNumber, isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Flex Shrink\r\n       * @see https://tailwindcss.com/docs/flex-shrink\r\n       */\r\n      shrink: [{\r\n        shrink: ['', isNumber, isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Order\r\n       * @see https://tailwindcss.com/docs/order\r\n       */\r\n      order: [{\r\n        order: [isInteger, 'first', 'last', 'none', isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Grid Template Columns\r\n       * @see https://tailwindcss.com/docs/grid-template-columns\r\n       */\r\n      'grid-cols': [{\r\n        'grid-cols': scaleGridTemplateColsRows()\r\n      }],\r\n      /**\r\n       * Grid Column Start / End\r\n       * @see https://tailwindcss.com/docs/grid-column\r\n       */\r\n      'col-start-end': [{\r\n        col: scaleGridColRowStartAndEnd()\r\n      }],\r\n      /**\r\n       * Grid Column Start\r\n       * @see https://tailwindcss.com/docs/grid-column\r\n       */\r\n      'col-start': [{\r\n        'col-start': scaleGridColRowStartOrEnd()\r\n      }],\r\n      /**\r\n       * Grid Column End\r\n       * @see https://tailwindcss.com/docs/grid-column\r\n       */\r\n      'col-end': [{\r\n        'col-end': scaleGridColRowStartOrEnd()\r\n      }],\r\n      /**\r\n       * Grid Template Rows\r\n       * @see https://tailwindcss.com/docs/grid-template-rows\r\n       */\r\n      'grid-rows': [{\r\n        'grid-rows': scaleGridTemplateColsRows()\r\n      }],\r\n      /**\r\n       * Grid Row Start / End\r\n       * @see https://tailwindcss.com/docs/grid-row\r\n       */\r\n      'row-start-end': [{\r\n        row: scaleGridColRowStartAndEnd()\r\n      }],\r\n      /**\r\n       * Grid Row Start\r\n       * @see https://tailwindcss.com/docs/grid-row\r\n       */\r\n      'row-start': [{\r\n        'row-start': scaleGridColRowStartOrEnd()\r\n      }],\r\n      /**\r\n       * Grid Row End\r\n       * @see https://tailwindcss.com/docs/grid-row\r\n       */\r\n      'row-end': [{\r\n        'row-end': scaleGridColRowStartOrEnd()\r\n      }],\r\n      /**\r\n       * Grid Auto Flow\r\n       * @see https://tailwindcss.com/docs/grid-auto-flow\r\n       */\r\n      'grid-flow': [{\r\n        'grid-flow': ['row', 'col', 'dense', 'row-dense', 'col-dense']\r\n      }],\r\n      /**\r\n       * Grid Auto Columns\r\n       * @see https://tailwindcss.com/docs/grid-auto-columns\r\n       */\r\n      'auto-cols': [{\r\n        'auto-cols': scaleGridAutoColsRows()\r\n      }],\r\n      /**\r\n       * Grid Auto Rows\r\n       * @see https://tailwindcss.com/docs/grid-auto-rows\r\n       */\r\n      'auto-rows': [{\r\n        'auto-rows': scaleGridAutoColsRows()\r\n      }],\r\n      /**\r\n       * Gap\r\n       * @see https://tailwindcss.com/docs/gap\r\n       */\r\n      gap: [{\r\n        gap: scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Gap X\r\n       * @see https://tailwindcss.com/docs/gap\r\n       */\r\n      'gap-x': [{\r\n        'gap-x': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Gap Y\r\n       * @see https://tailwindcss.com/docs/gap\r\n       */\r\n      'gap-y': [{\r\n        'gap-y': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Justify Content\r\n       * @see https://tailwindcss.com/docs/justify-content\r\n       */\r\n      'justify-content': [{\r\n        justify: [...scaleAlignPrimaryAxis(), 'normal']\r\n      }],\r\n      /**\r\n       * Justify Items\r\n       * @see https://tailwindcss.com/docs/justify-items\r\n       */\r\n      'justify-items': [{\r\n        'justify-items': [...scaleAlignSecondaryAxis(), 'normal']\r\n      }],\r\n      /**\r\n       * Justify Self\r\n       * @see https://tailwindcss.com/docs/justify-self\r\n       */\r\n      'justify-self': [{\r\n        'justify-self': ['auto', ...scaleAlignSecondaryAxis()]\r\n      }],\r\n      /**\r\n       * Align Content\r\n       * @see https://tailwindcss.com/docs/align-content\r\n       */\r\n      'align-content': [{\r\n        content: ['normal', ...scaleAlignPrimaryAxis()]\r\n      }],\r\n      /**\r\n       * Align Items\r\n       * @see https://tailwindcss.com/docs/align-items\r\n       */\r\n      'align-items': [{\r\n        items: [...scaleAlignSecondaryAxis(), {\r\n          baseline: ['', 'last']\r\n        }]\r\n      }],\r\n      /**\r\n       * Align Self\r\n       * @see https://tailwindcss.com/docs/align-self\r\n       */\r\n      'align-self': [{\r\n        self: ['auto', ...scaleAlignSecondaryAxis(), {\r\n          baseline: ['', 'last']\r\n        }]\r\n      }],\r\n      /**\r\n       * Place Content\r\n       * @see https://tailwindcss.com/docs/place-content\r\n       */\r\n      'place-content': [{\r\n        'place-content': scaleAlignPrimaryAxis()\r\n      }],\r\n      /**\r\n       * Place Items\r\n       * @see https://tailwindcss.com/docs/place-items\r\n       */\r\n      'place-items': [{\r\n        'place-items': [...scaleAlignSecondaryAxis(), 'baseline']\r\n      }],\r\n      /**\r\n       * Place Self\r\n       * @see https://tailwindcss.com/docs/place-self\r\n       */\r\n      'place-self': [{\r\n        'place-self': ['auto', ...scaleAlignSecondaryAxis()]\r\n      }],\r\n      // Spacing\r\n      /**\r\n       * Padding\r\n       * @see https://tailwindcss.com/docs/padding\r\n       */\r\n      p: [{\r\n        p: scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Padding X\r\n       * @see https://tailwindcss.com/docs/padding\r\n       */\r\n      px: [{\r\n        px: scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Padding Y\r\n       * @see https://tailwindcss.com/docs/padding\r\n       */\r\n      py: [{\r\n        py: scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Padding Start\r\n       * @see https://tailwindcss.com/docs/padding\r\n       */\r\n      ps: [{\r\n        ps: scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Padding End\r\n       * @see https://tailwindcss.com/docs/padding\r\n       */\r\n      pe: [{\r\n        pe: scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Padding Top\r\n       * @see https://tailwindcss.com/docs/padding\r\n       */\r\n      pt: [{\r\n        pt: scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Padding Right\r\n       * @see https://tailwindcss.com/docs/padding\r\n       */\r\n      pr: [{\r\n        pr: scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Padding Bottom\r\n       * @see https://tailwindcss.com/docs/padding\r\n       */\r\n      pb: [{\r\n        pb: scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Padding Left\r\n       * @see https://tailwindcss.com/docs/padding\r\n       */\r\n      pl: [{\r\n        pl: scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Margin\r\n       * @see https://tailwindcss.com/docs/margin\r\n       */\r\n      m: [{\r\n        m: scaleMargin()\r\n      }],\r\n      /**\r\n       * Margin X\r\n       * @see https://tailwindcss.com/docs/margin\r\n       */\r\n      mx: [{\r\n        mx: scaleMargin()\r\n      }],\r\n      /**\r\n       * Margin Y\r\n       * @see https://tailwindcss.com/docs/margin\r\n       */\r\n      my: [{\r\n        my: scaleMargin()\r\n      }],\r\n      /**\r\n       * Margin Start\r\n       * @see https://tailwindcss.com/docs/margin\r\n       */\r\n      ms: [{\r\n        ms: scaleMargin()\r\n      }],\r\n      /**\r\n       * Margin End\r\n       * @see https://tailwindcss.com/docs/margin\r\n       */\r\n      me: [{\r\n        me: scaleMargin()\r\n      }],\r\n      /**\r\n       * Margin Top\r\n       * @see https://tailwindcss.com/docs/margin\r\n       */\r\n      mt: [{\r\n        mt: scaleMargin()\r\n      }],\r\n      /**\r\n       * Margin Right\r\n       * @see https://tailwindcss.com/docs/margin\r\n       */\r\n      mr: [{\r\n        mr: scaleMargin()\r\n      }],\r\n      /**\r\n       * Margin Bottom\r\n       * @see https://tailwindcss.com/docs/margin\r\n       */\r\n      mb: [{\r\n        mb: scaleMargin()\r\n      }],\r\n      /**\r\n       * Margin Left\r\n       * @see https://tailwindcss.com/docs/margin\r\n       */\r\n      ml: [{\r\n        ml: scaleMargin()\r\n      }],\r\n      /**\r\n       * Space Between X\r\n       * @see https://tailwindcss.com/docs/margin#adding-space-between-children\r\n       */\r\n      'space-x': [{\r\n        'space-x': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Space Between X Reverse\r\n       * @see https://tailwindcss.com/docs/margin#adding-space-between-children\r\n       */\r\n      'space-x-reverse': ['space-x-reverse'],\r\n      /**\r\n       * Space Between Y\r\n       * @see https://tailwindcss.com/docs/margin#adding-space-between-children\r\n       */\r\n      'space-y': [{\r\n        'space-y': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Space Between Y Reverse\r\n       * @see https://tailwindcss.com/docs/margin#adding-space-between-children\r\n       */\r\n      'space-y-reverse': ['space-y-reverse'],\r\n      // --------------\r\n      // --- Sizing ---\r\n      // --------------\r\n      /**\r\n       * Size\r\n       * @see https://tailwindcss.com/docs/width#setting-both-width-and-height\r\n       */\r\n      size: [{\r\n        size: scaleSizing()\r\n      }],\r\n      /**\r\n       * Width\r\n       * @see https://tailwindcss.com/docs/width\r\n       */\r\n      w: [{\r\n        w: [themeContainer, 'screen', ...scaleSizing()]\r\n      }],\r\n      /**\r\n       * Min-Width\r\n       * @see https://tailwindcss.com/docs/min-width\r\n       */\r\n      'min-w': [{\r\n        'min-w': [themeContainer, 'screen', /** Deprecated. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\r\n        'none', ...scaleSizing()]\r\n      }],\r\n      /**\r\n       * Max-Width\r\n       * @see https://tailwindcss.com/docs/max-width\r\n       */\r\n      'max-w': [{\r\n        'max-w': [themeContainer, 'screen', 'none', /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\r\n        'prose', /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\r\n        {\r\n          screen: [themeBreakpoint]\r\n        }, ...scaleSizing()]\r\n      }],\r\n      /**\r\n       * Height\r\n       * @see https://tailwindcss.com/docs/height\r\n       */\r\n      h: [{\r\n        h: ['screen', 'lh', ...scaleSizing()]\r\n      }],\r\n      /**\r\n       * Min-Height\r\n       * @see https://tailwindcss.com/docs/min-height\r\n       */\r\n      'min-h': [{\r\n        'min-h': ['screen', 'lh', 'none', ...scaleSizing()]\r\n      }],\r\n      /**\r\n       * Max-Height\r\n       * @see https://tailwindcss.com/docs/max-height\r\n       */\r\n      'max-h': [{\r\n        'max-h': ['screen', 'lh', ...scaleSizing()]\r\n      }],\r\n      // ------------------\r\n      // --- Typography ---\r\n      // ------------------\r\n      /**\r\n       * Font Size\r\n       * @see https://tailwindcss.com/docs/font-size\r\n       */\r\n      'font-size': [{\r\n        text: ['base', themeText, isArbitraryVariableLength, isArbitraryLength]\r\n      }],\r\n      /**\r\n       * Font Smoothing\r\n       * @see https://tailwindcss.com/docs/font-smoothing\r\n       */\r\n      'font-smoothing': ['antialiased', 'subpixel-antialiased'],\r\n      /**\r\n       * Font Style\r\n       * @see https://tailwindcss.com/docs/font-style\r\n       */\r\n      'font-style': ['italic', 'not-italic'],\r\n      /**\r\n       * Font Weight\r\n       * @see https://tailwindcss.com/docs/font-weight\r\n       */\r\n      'font-weight': [{\r\n        font: [themeFontWeight, isArbitraryVariable, isArbitraryNumber]\r\n      }],\r\n      /**\r\n       * Font Stretch\r\n       * @see https://tailwindcss.com/docs/font-stretch\r\n       */\r\n      'font-stretch': [{\r\n        'font-stretch': ['ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded', isPercent, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Font Family\r\n       * @see https://tailwindcss.com/docs/font-family\r\n       */\r\n      'font-family': [{\r\n        font: [isArbitraryVariableFamilyName, isArbitraryValue, themeFont]\r\n      }],\r\n      /**\r\n       * Font Variant Numeric\r\n       * @see https://tailwindcss.com/docs/font-variant-numeric\r\n       */\r\n      'fvn-normal': ['normal-nums'],\r\n      /**\r\n       * Font Variant Numeric\r\n       * @see https://tailwindcss.com/docs/font-variant-numeric\r\n       */\r\n      'fvn-ordinal': ['ordinal'],\r\n      /**\r\n       * Font Variant Numeric\r\n       * @see https://tailwindcss.com/docs/font-variant-numeric\r\n       */\r\n      'fvn-slashed-zero': ['slashed-zero'],\r\n      /**\r\n       * Font Variant Numeric\r\n       * @see https://tailwindcss.com/docs/font-variant-numeric\r\n       */\r\n      'fvn-figure': ['lining-nums', 'oldstyle-nums'],\r\n      /**\r\n       * Font Variant Numeric\r\n       * @see https://tailwindcss.com/docs/font-variant-numeric\r\n       */\r\n      'fvn-spacing': ['proportional-nums', 'tabular-nums'],\r\n      /**\r\n       * Font Variant Numeric\r\n       * @see https://tailwindcss.com/docs/font-variant-numeric\r\n       */\r\n      'fvn-fraction': ['diagonal-fractions', 'stacked-fractions'],\r\n      /**\r\n       * Letter Spacing\r\n       * @see https://tailwindcss.com/docs/letter-spacing\r\n       */\r\n      tracking: [{\r\n        tracking: [themeTracking, isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Line Clamp\r\n       * @see https://tailwindcss.com/docs/line-clamp\r\n       */\r\n      'line-clamp': [{\r\n        'line-clamp': [isNumber, 'none', isArbitraryVariable, isArbitraryNumber]\r\n      }],\r\n      /**\r\n       * Line Height\r\n       * @see https://tailwindcss.com/docs/line-height\r\n       */\r\n      leading: [{\r\n        leading: [/** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\r\n        themeLeading, ...scaleUnambiguousSpacing()]\r\n      }],\r\n      /**\r\n       * List Style Image\r\n       * @see https://tailwindcss.com/docs/list-style-image\r\n       */\r\n      'list-image': [{\r\n        'list-image': ['none', isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * List Style Position\r\n       * @see https://tailwindcss.com/docs/list-style-position\r\n       */\r\n      'list-style-position': [{\r\n        list: ['inside', 'outside']\r\n      }],\r\n      /**\r\n       * List Style Type\r\n       * @see https://tailwindcss.com/docs/list-style-type\r\n       */\r\n      'list-style-type': [{\r\n        list: ['disc', 'decimal', 'none', isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Text Alignment\r\n       * @see https://tailwindcss.com/docs/text-align\r\n       */\r\n      'text-alignment': [{\r\n        text: ['left', 'center', 'right', 'justify', 'start', 'end']\r\n      }],\r\n      /**\r\n       * Placeholder Color\r\n       * @deprecated since Tailwind CSS v3.0.0\r\n       * @see https://v3.tailwindcss.com/docs/placeholder-color\r\n       */\r\n      'placeholder-color': [{\r\n        placeholder: scaleColor()\r\n      }],\r\n      /**\r\n       * Text Color\r\n       * @see https://tailwindcss.com/docs/text-color\r\n       */\r\n      'text-color': [{\r\n        text: scaleColor()\r\n      }],\r\n      /**\r\n       * Text Decoration\r\n       * @see https://tailwindcss.com/docs/text-decoration\r\n       */\r\n      'text-decoration': ['underline', 'overline', 'line-through', 'no-underline'],\r\n      /**\r\n       * Text Decoration Style\r\n       * @see https://tailwindcss.com/docs/text-decoration-style\r\n       */\r\n      'text-decoration-style': [{\r\n        decoration: [...scaleLineStyle(), 'wavy']\r\n      }],\r\n      /**\r\n       * Text Decoration Thickness\r\n       * @see https://tailwindcss.com/docs/text-decoration-thickness\r\n       */\r\n      'text-decoration-thickness': [{\r\n        decoration: [isNumber, 'from-font', 'auto', isArbitraryVariable, isArbitraryLength]\r\n      }],\r\n      /**\r\n       * Text Decoration Color\r\n       * @see https://tailwindcss.com/docs/text-decoration-color\r\n       */\r\n      'text-decoration-color': [{\r\n        decoration: scaleColor()\r\n      }],\r\n      /**\r\n       * Text Underline Offset\r\n       * @see https://tailwindcss.com/docs/text-underline-offset\r\n       */\r\n      'underline-offset': [{\r\n        'underline-offset': [isNumber, 'auto', isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Text Transform\r\n       * @see https://tailwindcss.com/docs/text-transform\r\n       */\r\n      'text-transform': ['uppercase', 'lowercase', 'capitalize', 'normal-case'],\r\n      /**\r\n       * Text Overflow\r\n       * @see https://tailwindcss.com/docs/text-overflow\r\n       */\r\n      'text-overflow': ['truncate', 'text-ellipsis', 'text-clip'],\r\n      /**\r\n       * Text Wrap\r\n       * @see https://tailwindcss.com/docs/text-wrap\r\n       */\r\n      'text-wrap': [{\r\n        text: ['wrap', 'nowrap', 'balance', 'pretty']\r\n      }],\r\n      /**\r\n       * Text Indent\r\n       * @see https://tailwindcss.com/docs/text-indent\r\n       */\r\n      indent: [{\r\n        indent: scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Vertical Alignment\r\n       * @see https://tailwindcss.com/docs/vertical-align\r\n       */\r\n      'vertical-align': [{\r\n        align: ['baseline', 'top', 'middle', 'bottom', 'text-top', 'text-bottom', 'sub', 'super', isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Whitespace\r\n       * @see https://tailwindcss.com/docs/whitespace\r\n       */\r\n      whitespace: [{\r\n        whitespace: ['normal', 'nowrap', 'pre', 'pre-line', 'pre-wrap', 'break-spaces']\r\n      }],\r\n      /**\r\n       * Word Break\r\n       * @see https://tailwindcss.com/docs/word-break\r\n       */\r\n      break: [{\r\n        break: ['normal', 'words', 'all', 'keep']\r\n      }],\r\n      /**\r\n       * Overflow Wrap\r\n       * @see https://tailwindcss.com/docs/overflow-wrap\r\n       */\r\n      wrap: [{\r\n        wrap: ['break-word', 'anywhere', 'normal']\r\n      }],\r\n      /**\r\n       * Hyphens\r\n       * @see https://tailwindcss.com/docs/hyphens\r\n       */\r\n      hyphens: [{\r\n        hyphens: ['none', 'manual', 'auto']\r\n      }],\r\n      /**\r\n       * Content\r\n       * @see https://tailwindcss.com/docs/content\r\n       */\r\n      content: [{\r\n        content: ['none', isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      // -------------------\r\n      // --- Backgrounds ---\r\n      // -------------------\r\n      /**\r\n       * Background Attachment\r\n       * @see https://tailwindcss.com/docs/background-attachment\r\n       */\r\n      'bg-attachment': [{\r\n        bg: ['fixed', 'local', 'scroll']\r\n      }],\r\n      /**\r\n       * Background Clip\r\n       * @see https://tailwindcss.com/docs/background-clip\r\n       */\r\n      'bg-clip': [{\r\n        'bg-clip': ['border', 'padding', 'content', 'text']\r\n      }],\r\n      /**\r\n       * Background Origin\r\n       * @see https://tailwindcss.com/docs/background-origin\r\n       */\r\n      'bg-origin': [{\r\n        'bg-origin': ['border', 'padding', 'content']\r\n      }],\r\n      /**\r\n       * Background Position\r\n       * @see https://tailwindcss.com/docs/background-position\r\n       */\r\n      'bg-position': [{\r\n        bg: scaleBgPosition()\r\n      }],\r\n      /**\r\n       * Background Repeat\r\n       * @see https://tailwindcss.com/docs/background-repeat\r\n       */\r\n      'bg-repeat': [{\r\n        bg: scaleBgRepeat()\r\n      }],\r\n      /**\r\n       * Background Size\r\n       * @see https://tailwindcss.com/docs/background-size\r\n       */\r\n      'bg-size': [{\r\n        bg: scaleBgSize()\r\n      }],\r\n      /**\r\n       * Background Image\r\n       * @see https://tailwindcss.com/docs/background-image\r\n       */\r\n      'bg-image': [{\r\n        bg: ['none', {\r\n          linear: [{\r\n            to: ['t', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl']\r\n          }, isInteger, isArbitraryVariable, isArbitraryValue],\r\n          radial: ['', isArbitraryVariable, isArbitraryValue],\r\n          conic: [isInteger, isArbitraryVariable, isArbitraryValue]\r\n        }, isArbitraryVariableImage, isArbitraryImage]\r\n      }],\r\n      /**\r\n       * Background Color\r\n       * @see https://tailwindcss.com/docs/background-color\r\n       */\r\n      'bg-color': [{\r\n        bg: scaleColor()\r\n      }],\r\n      /**\r\n       * Gradient Color Stops From Position\r\n       * @see https://tailwindcss.com/docs/gradient-color-stops\r\n       */\r\n      'gradient-from-pos': [{\r\n        from: scaleGradientStopPosition()\r\n      }],\r\n      /**\r\n       * Gradient Color Stops Via Position\r\n       * @see https://tailwindcss.com/docs/gradient-color-stops\r\n       */\r\n      'gradient-via-pos': [{\r\n        via: scaleGradientStopPosition()\r\n      }],\r\n      /**\r\n       * Gradient Color Stops To Position\r\n       * @see https://tailwindcss.com/docs/gradient-color-stops\r\n       */\r\n      'gradient-to-pos': [{\r\n        to: scaleGradientStopPosition()\r\n      }],\r\n      /**\r\n       * Gradient Color Stops From\r\n       * @see https://tailwindcss.com/docs/gradient-color-stops\r\n       */\r\n      'gradient-from': [{\r\n        from: scaleColor()\r\n      }],\r\n      /**\r\n       * Gradient Color Stops Via\r\n       * @see https://tailwindcss.com/docs/gradient-color-stops\r\n       */\r\n      'gradient-via': [{\r\n        via: scaleColor()\r\n      }],\r\n      /**\r\n       * Gradient Color Stops To\r\n       * @see https://tailwindcss.com/docs/gradient-color-stops\r\n       */\r\n      'gradient-to': [{\r\n        to: scaleColor()\r\n      }],\r\n      // ---------------\r\n      // --- Borders ---\r\n      // ---------------\r\n      /**\r\n       * Border Radius\r\n       * @see https://tailwindcss.com/docs/border-radius\r\n       */\r\n      rounded: [{\r\n        rounded: scaleRadius()\r\n      }],\r\n      /**\r\n       * Border Radius Start\r\n       * @see https://tailwindcss.com/docs/border-radius\r\n       */\r\n      'rounded-s': [{\r\n        'rounded-s': scaleRadius()\r\n      }],\r\n      /**\r\n       * Border Radius End\r\n       * @see https://tailwindcss.com/docs/border-radius\r\n       */\r\n      'rounded-e': [{\r\n        'rounded-e': scaleRadius()\r\n      }],\r\n      /**\r\n       * Border Radius Top\r\n       * @see https://tailwindcss.com/docs/border-radius\r\n       */\r\n      'rounded-t': [{\r\n        'rounded-t': scaleRadius()\r\n      }],\r\n      /**\r\n       * Border Radius Right\r\n       * @see https://tailwindcss.com/docs/border-radius\r\n       */\r\n      'rounded-r': [{\r\n        'rounded-r': scaleRadius()\r\n      }],\r\n      /**\r\n       * Border Radius Bottom\r\n       * @see https://tailwindcss.com/docs/border-radius\r\n       */\r\n      'rounded-b': [{\r\n        'rounded-b': scaleRadius()\r\n      }],\r\n      /**\r\n       * Border Radius Left\r\n       * @see https://tailwindcss.com/docs/border-radius\r\n       */\r\n      'rounded-l': [{\r\n        'rounded-l': scaleRadius()\r\n      }],\r\n      /**\r\n       * Border Radius Start Start\r\n       * @see https://tailwindcss.com/docs/border-radius\r\n       */\r\n      'rounded-ss': [{\r\n        'rounded-ss': scaleRadius()\r\n      }],\r\n      /**\r\n       * Border Radius Start End\r\n       * @see https://tailwindcss.com/docs/border-radius\r\n       */\r\n      'rounded-se': [{\r\n        'rounded-se': scaleRadius()\r\n      }],\r\n      /**\r\n       * Border Radius End End\r\n       * @see https://tailwindcss.com/docs/border-radius\r\n       */\r\n      'rounded-ee': [{\r\n        'rounded-ee': scaleRadius()\r\n      }],\r\n      /**\r\n       * Border Radius End Start\r\n       * @see https://tailwindcss.com/docs/border-radius\r\n       */\r\n      'rounded-es': [{\r\n        'rounded-es': scaleRadius()\r\n      }],\r\n      /**\r\n       * Border Radius Top Left\r\n       * @see https://tailwindcss.com/docs/border-radius\r\n       */\r\n      'rounded-tl': [{\r\n        'rounded-tl': scaleRadius()\r\n      }],\r\n      /**\r\n       * Border Radius Top Right\r\n       * @see https://tailwindcss.com/docs/border-radius\r\n       */\r\n      'rounded-tr': [{\r\n        'rounded-tr': scaleRadius()\r\n      }],\r\n      /**\r\n       * Border Radius Bottom Right\r\n       * @see https://tailwindcss.com/docs/border-radius\r\n       */\r\n      'rounded-br': [{\r\n        'rounded-br': scaleRadius()\r\n      }],\r\n      /**\r\n       * Border Radius Bottom Left\r\n       * @see https://tailwindcss.com/docs/border-radius\r\n       */\r\n      'rounded-bl': [{\r\n        'rounded-bl': scaleRadius()\r\n      }],\r\n      /**\r\n       * Border Width\r\n       * @see https://tailwindcss.com/docs/border-width\r\n       */\r\n      'border-w': [{\r\n        border: scaleBorderWidth()\r\n      }],\r\n      /**\r\n       * Border Width X\r\n       * @see https://tailwindcss.com/docs/border-width\r\n       */\r\n      'border-w-x': [{\r\n        'border-x': scaleBorderWidth()\r\n      }],\r\n      /**\r\n       * Border Width Y\r\n       * @see https://tailwindcss.com/docs/border-width\r\n       */\r\n      'border-w-y': [{\r\n        'border-y': scaleBorderWidth()\r\n      }],\r\n      /**\r\n       * Border Width Start\r\n       * @see https://tailwindcss.com/docs/border-width\r\n       */\r\n      'border-w-s': [{\r\n        'border-s': scaleBorderWidth()\r\n      }],\r\n      /**\r\n       * Border Width End\r\n       * @see https://tailwindcss.com/docs/border-width\r\n       */\r\n      'border-w-e': [{\r\n        'border-e': scaleBorderWidth()\r\n      }],\r\n      /**\r\n       * Border Width Top\r\n       * @see https://tailwindcss.com/docs/border-width\r\n       */\r\n      'border-w-t': [{\r\n        'border-t': scaleBorderWidth()\r\n      }],\r\n      /**\r\n       * Border Width Right\r\n       * @see https://tailwindcss.com/docs/border-width\r\n       */\r\n      'border-w-r': [{\r\n        'border-r': scaleBorderWidth()\r\n      }],\r\n      /**\r\n       * Border Width Bottom\r\n       * @see https://tailwindcss.com/docs/border-width\r\n       */\r\n      'border-w-b': [{\r\n        'border-b': scaleBorderWidth()\r\n      }],\r\n      /**\r\n       * Border Width Left\r\n       * @see https://tailwindcss.com/docs/border-width\r\n       */\r\n      'border-w-l': [{\r\n        'border-l': scaleBorderWidth()\r\n      }],\r\n      /**\r\n       * Divide Width X\r\n       * @see https://tailwindcss.com/docs/border-width#between-children\r\n       */\r\n      'divide-x': [{\r\n        'divide-x': scaleBorderWidth()\r\n      }],\r\n      /**\r\n       * Divide Width X Reverse\r\n       * @see https://tailwindcss.com/docs/border-width#between-children\r\n       */\r\n      'divide-x-reverse': ['divide-x-reverse'],\r\n      /**\r\n       * Divide Width Y\r\n       * @see https://tailwindcss.com/docs/border-width#between-children\r\n       */\r\n      'divide-y': [{\r\n        'divide-y': scaleBorderWidth()\r\n      }],\r\n      /**\r\n       * Divide Width Y Reverse\r\n       * @see https://tailwindcss.com/docs/border-width#between-children\r\n       */\r\n      'divide-y-reverse': ['divide-y-reverse'],\r\n      /**\r\n       * Border Style\r\n       * @see https://tailwindcss.com/docs/border-style\r\n       */\r\n      'border-style': [{\r\n        border: [...scaleLineStyle(), 'hidden', 'none']\r\n      }],\r\n      /**\r\n       * Divide Style\r\n       * @see https://tailwindcss.com/docs/border-style#setting-the-divider-style\r\n       */\r\n      'divide-style': [{\r\n        divide: [...scaleLineStyle(), 'hidden', 'none']\r\n      }],\r\n      /**\r\n       * Border Color\r\n       * @see https://tailwindcss.com/docs/border-color\r\n       */\r\n      'border-color': [{\r\n        border: scaleColor()\r\n      }],\r\n      /**\r\n       * Border Color X\r\n       * @see https://tailwindcss.com/docs/border-color\r\n       */\r\n      'border-color-x': [{\r\n        'border-x': scaleColor()\r\n      }],\r\n      /**\r\n       * Border Color Y\r\n       * @see https://tailwindcss.com/docs/border-color\r\n       */\r\n      'border-color-y': [{\r\n        'border-y': scaleColor()\r\n      }],\r\n      /**\r\n       * Border Color S\r\n       * @see https://tailwindcss.com/docs/border-color\r\n       */\r\n      'border-color-s': [{\r\n        'border-s': scaleColor()\r\n      }],\r\n      /**\r\n       * Border Color E\r\n       * @see https://tailwindcss.com/docs/border-color\r\n       */\r\n      'border-color-e': [{\r\n        'border-e': scaleColor()\r\n      }],\r\n      /**\r\n       * Border Color Top\r\n       * @see https://tailwindcss.com/docs/border-color\r\n       */\r\n      'border-color-t': [{\r\n        'border-t': scaleColor()\r\n      }],\r\n      /**\r\n       * Border Color Right\r\n       * @see https://tailwindcss.com/docs/border-color\r\n       */\r\n      'border-color-r': [{\r\n        'border-r': scaleColor()\r\n      }],\r\n      /**\r\n       * Border Color Bottom\r\n       * @see https://tailwindcss.com/docs/border-color\r\n       */\r\n      'border-color-b': [{\r\n        'border-b': scaleColor()\r\n      }],\r\n      /**\r\n       * Border Color Left\r\n       * @see https://tailwindcss.com/docs/border-color\r\n       */\r\n      'border-color-l': [{\r\n        'border-l': scaleColor()\r\n      }],\r\n      /**\r\n       * Divide Color\r\n       * @see https://tailwindcss.com/docs/divide-color\r\n       */\r\n      'divide-color': [{\r\n        divide: scaleColor()\r\n      }],\r\n      /**\r\n       * Outline Style\r\n       * @see https://tailwindcss.com/docs/outline-style\r\n       */\r\n      'outline-style': [{\r\n        outline: [...scaleLineStyle(), 'none', 'hidden']\r\n      }],\r\n      /**\r\n       * Outline Offset\r\n       * @see https://tailwindcss.com/docs/outline-offset\r\n       */\r\n      'outline-offset': [{\r\n        'outline-offset': [isNumber, isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Outline Width\r\n       * @see https://tailwindcss.com/docs/outline-width\r\n       */\r\n      'outline-w': [{\r\n        outline: ['', isNumber, isArbitraryVariableLength, isArbitraryLength]\r\n      }],\r\n      /**\r\n       * Outline Color\r\n       * @see https://tailwindcss.com/docs/outline-color\r\n       */\r\n      'outline-color': [{\r\n        outline: scaleColor()\r\n      }],\r\n      // ---------------\r\n      // --- Effects ---\r\n      // ---------------\r\n      /**\r\n       * Box Shadow\r\n       * @see https://tailwindcss.com/docs/box-shadow\r\n       */\r\n      shadow: [{\r\n        shadow: [\r\n        // Deprecated since Tailwind CSS v4.0.0\r\n        '', 'none', themeShadow, isArbitraryVariableShadow, isArbitraryShadow]\r\n      }],\r\n      /**\r\n       * Box Shadow Color\r\n       * @see https://tailwindcss.com/docs/box-shadow#setting-the-shadow-color\r\n       */\r\n      'shadow-color': [{\r\n        shadow: scaleColor()\r\n      }],\r\n      /**\r\n       * Inset Box Shadow\r\n       * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-shadow\r\n       */\r\n      'inset-shadow': [{\r\n        'inset-shadow': ['none', themeInsetShadow, isArbitraryVariableShadow, isArbitraryShadow]\r\n      }],\r\n      /**\r\n       * Inset Box Shadow Color\r\n       * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-shadow-color\r\n       */\r\n      'inset-shadow-color': [{\r\n        'inset-shadow': scaleColor()\r\n      }],\r\n      /**\r\n       * Ring Width\r\n       * @see https://tailwindcss.com/docs/box-shadow#adding-a-ring\r\n       */\r\n      'ring-w': [{\r\n        ring: scaleBorderWidth()\r\n      }],\r\n      /**\r\n       * Ring Width Inset\r\n       * @see https://v3.tailwindcss.com/docs/ring-width#inset-rings\r\n       * @deprecated since Tailwind CSS v4.0.0\r\n       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158\r\n       */\r\n      'ring-w-inset': ['ring-inset'],\r\n      /**\r\n       * Ring Color\r\n       * @see https://tailwindcss.com/docs/box-shadow#setting-the-ring-color\r\n       */\r\n      'ring-color': [{\r\n        ring: scaleColor()\r\n      }],\r\n      /**\r\n       * Ring Offset Width\r\n       * @see https://v3.tailwindcss.com/docs/ring-offset-width\r\n       * @deprecated since Tailwind CSS v4.0.0\r\n       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158\r\n       */\r\n      'ring-offset-w': [{\r\n        'ring-offset': [isNumber, isArbitraryLength]\r\n      }],\r\n      /**\r\n       * Ring Offset Color\r\n       * @see https://v3.tailwindcss.com/docs/ring-offset-color\r\n       * @deprecated since Tailwind CSS v4.0.0\r\n       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158\r\n       */\r\n      'ring-offset-color': [{\r\n        'ring-offset': scaleColor()\r\n      }],\r\n      /**\r\n       * Inset Ring Width\r\n       * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-ring\r\n       */\r\n      'inset-ring-w': [{\r\n        'inset-ring': scaleBorderWidth()\r\n      }],\r\n      /**\r\n       * Inset Ring Color\r\n       * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-ring-color\r\n       */\r\n      'inset-ring-color': [{\r\n        'inset-ring': scaleColor()\r\n      }],\r\n      /**\r\n       * Text Shadow\r\n       * @see https://tailwindcss.com/docs/text-shadow\r\n       */\r\n      'text-shadow': [{\r\n        'text-shadow': ['none', themeTextShadow, isArbitraryVariableShadow, isArbitraryShadow]\r\n      }],\r\n      /**\r\n       * Text Shadow Color\r\n       * @see https://tailwindcss.com/docs/text-shadow#setting-the-shadow-color\r\n       */\r\n      'text-shadow-color': [{\r\n        'text-shadow': scaleColor()\r\n      }],\r\n      /**\r\n       * Opacity\r\n       * @see https://tailwindcss.com/docs/opacity\r\n       */\r\n      opacity: [{\r\n        opacity: [isNumber, isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Mix Blend Mode\r\n       * @see https://tailwindcss.com/docs/mix-blend-mode\r\n       */\r\n      'mix-blend': [{\r\n        'mix-blend': [...scaleBlendMode(), 'plus-darker', 'plus-lighter']\r\n      }],\r\n      /**\r\n       * Background Blend Mode\r\n       * @see https://tailwindcss.com/docs/background-blend-mode\r\n       */\r\n      'bg-blend': [{\r\n        'bg-blend': scaleBlendMode()\r\n      }],\r\n      /**\r\n       * Mask Clip\r\n       * @see https://tailwindcss.com/docs/mask-clip\r\n       */\r\n      'mask-clip': [{\r\n        'mask-clip': ['border', 'padding', 'content', 'fill', 'stroke', 'view']\r\n      }, 'mask-no-clip'],\r\n      /**\r\n       * Mask Composite\r\n       * @see https://tailwindcss.com/docs/mask-composite\r\n       */\r\n      'mask-composite': [{\r\n        mask: ['add', 'subtract', 'intersect', 'exclude']\r\n      }],\r\n      /**\r\n       * Mask Image\r\n       * @see https://tailwindcss.com/docs/mask-image\r\n       */\r\n      'mask-image-linear-pos': [{\r\n        'mask-linear': [isNumber]\r\n      }],\r\n      'mask-image-linear-from-pos': [{\r\n        'mask-linear-from': scaleMaskImagePosition()\r\n      }],\r\n      'mask-image-linear-to-pos': [{\r\n        'mask-linear-to': scaleMaskImagePosition()\r\n      }],\r\n      'mask-image-linear-from-color': [{\r\n        'mask-linear-from': scaleColor()\r\n      }],\r\n      'mask-image-linear-to-color': [{\r\n        'mask-linear-to': scaleColor()\r\n      }],\r\n      'mask-image-t-from-pos': [{\r\n        'mask-t-from': scaleMaskImagePosition()\r\n      }],\r\n      'mask-image-t-to-pos': [{\r\n        'mask-t-to': scaleMaskImagePosition()\r\n      }],\r\n      'mask-image-t-from-color': [{\r\n        'mask-t-from': scaleColor()\r\n      }],\r\n      'mask-image-t-to-color': [{\r\n        'mask-t-to': scaleColor()\r\n      }],\r\n      'mask-image-r-from-pos': [{\r\n        'mask-r-from': scaleMaskImagePosition()\r\n      }],\r\n      'mask-image-r-to-pos': [{\r\n        'mask-r-to': scaleMaskImagePosition()\r\n      }],\r\n      'mask-image-r-from-color': [{\r\n        'mask-r-from': scaleColor()\r\n      }],\r\n      'mask-image-r-to-color': [{\r\n        'mask-r-to': scaleColor()\r\n      }],\r\n      'mask-image-b-from-pos': [{\r\n        'mask-b-from': scaleMaskImagePosition()\r\n      }],\r\n      'mask-image-b-to-pos': [{\r\n        'mask-b-to': scaleMaskImagePosition()\r\n      }],\r\n      'mask-image-b-from-color': [{\r\n        'mask-b-from': scaleColor()\r\n      }],\r\n      'mask-image-b-to-color': [{\r\n        'mask-b-to': scaleColor()\r\n      }],\r\n      'mask-image-l-from-pos': [{\r\n        'mask-l-from': scaleMaskImagePosition()\r\n      }],\r\n      'mask-image-l-to-pos': [{\r\n        'mask-l-to': scaleMaskImagePosition()\r\n      }],\r\n      'mask-image-l-from-color': [{\r\n        'mask-l-from': scaleColor()\r\n      }],\r\n      'mask-image-l-to-color': [{\r\n        'mask-l-to': scaleColor()\r\n      }],\r\n      'mask-image-x-from-pos': [{\r\n        'mask-x-from': scaleMaskImagePosition()\r\n      }],\r\n      'mask-image-x-to-pos': [{\r\n        'mask-x-to': scaleMaskImagePosition()\r\n      }],\r\n      'mask-image-x-from-color': [{\r\n        'mask-x-from': scaleColor()\r\n      }],\r\n      'mask-image-x-to-color': [{\r\n        'mask-x-to': scaleColor()\r\n      }],\r\n      'mask-image-y-from-pos': [{\r\n        'mask-y-from': scaleMaskImagePosition()\r\n      }],\r\n      'mask-image-y-to-pos': [{\r\n        'mask-y-to': scaleMaskImagePosition()\r\n      }],\r\n      'mask-image-y-from-color': [{\r\n        'mask-y-from': scaleColor()\r\n      }],\r\n      'mask-image-y-to-color': [{\r\n        'mask-y-to': scaleColor()\r\n      }],\r\n      'mask-image-radial': [{\r\n        'mask-radial': [isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      'mask-image-radial-from-pos': [{\r\n        'mask-radial-from': scaleMaskImagePosition()\r\n      }],\r\n      'mask-image-radial-to-pos': [{\r\n        'mask-radial-to': scaleMaskImagePosition()\r\n      }],\r\n      'mask-image-radial-from-color': [{\r\n        'mask-radial-from': scaleColor()\r\n      }],\r\n      'mask-image-radial-to-color': [{\r\n        'mask-radial-to': scaleColor()\r\n      }],\r\n      'mask-image-radial-shape': [{\r\n        'mask-radial': ['circle', 'ellipse']\r\n      }],\r\n      'mask-image-radial-size': [{\r\n        'mask-radial': [{\r\n          closest: ['side', 'corner'],\r\n          farthest: ['side', 'corner']\r\n        }]\r\n      }],\r\n      'mask-image-radial-pos': [{\r\n        'mask-radial-at': scalePosition()\r\n      }],\r\n      'mask-image-conic-pos': [{\r\n        'mask-conic': [isNumber]\r\n      }],\r\n      'mask-image-conic-from-pos': [{\r\n        'mask-conic-from': scaleMaskImagePosition()\r\n      }],\r\n      'mask-image-conic-to-pos': [{\r\n        'mask-conic-to': scaleMaskImagePosition()\r\n      }],\r\n      'mask-image-conic-from-color': [{\r\n        'mask-conic-from': scaleColor()\r\n      }],\r\n      'mask-image-conic-to-color': [{\r\n        'mask-conic-to': scaleColor()\r\n      }],\r\n      /**\r\n       * Mask Mode\r\n       * @see https://tailwindcss.com/docs/mask-mode\r\n       */\r\n      'mask-mode': [{\r\n        mask: ['alpha', 'luminance', 'match']\r\n      }],\r\n      /**\r\n       * Mask Origin\r\n       * @see https://tailwindcss.com/docs/mask-origin\r\n       */\r\n      'mask-origin': [{\r\n        'mask-origin': ['border', 'padding', 'content', 'fill', 'stroke', 'view']\r\n      }],\r\n      /**\r\n       * Mask Position\r\n       * @see https://tailwindcss.com/docs/mask-position\r\n       */\r\n      'mask-position': [{\r\n        mask: scaleBgPosition()\r\n      }],\r\n      /**\r\n       * Mask Repeat\r\n       * @see https://tailwindcss.com/docs/mask-repeat\r\n       */\r\n      'mask-repeat': [{\r\n        mask: scaleBgRepeat()\r\n      }],\r\n      /**\r\n       * Mask Size\r\n       * @see https://tailwindcss.com/docs/mask-size\r\n       */\r\n      'mask-size': [{\r\n        mask: scaleBgSize()\r\n      }],\r\n      /**\r\n       * Mask Type\r\n       * @see https://tailwindcss.com/docs/mask-type\r\n       */\r\n      'mask-type': [{\r\n        'mask-type': ['alpha', 'luminance']\r\n      }],\r\n      /**\r\n       * Mask Image\r\n       * @see https://tailwindcss.com/docs/mask-image\r\n       */\r\n      'mask-image': [{\r\n        mask: ['none', isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      // ---------------\r\n      // --- Filters ---\r\n      // ---------------\r\n      /**\r\n       * Filter\r\n       * @see https://tailwindcss.com/docs/filter\r\n       */\r\n      filter: [{\r\n        filter: [\r\n        // Deprecated since Tailwind CSS v3.0.0\r\n        '', 'none', isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Blur\r\n       * @see https://tailwindcss.com/docs/blur\r\n       */\r\n      blur: [{\r\n        blur: scaleBlur()\r\n      }],\r\n      /**\r\n       * Brightness\r\n       * @see https://tailwindcss.com/docs/brightness\r\n       */\r\n      brightness: [{\r\n        brightness: [isNumber, isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Contrast\r\n       * @see https://tailwindcss.com/docs/contrast\r\n       */\r\n      contrast: [{\r\n        contrast: [isNumber, isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Drop Shadow\r\n       * @see https://tailwindcss.com/docs/drop-shadow\r\n       */\r\n      'drop-shadow': [{\r\n        'drop-shadow': [\r\n        // Deprecated since Tailwind CSS v4.0.0\r\n        '', 'none', themeDropShadow, isArbitraryVariableShadow, isArbitraryShadow]\r\n      }],\r\n      /**\r\n       * Drop Shadow Color\r\n       * @see https://tailwindcss.com/docs/filter-drop-shadow#setting-the-shadow-color\r\n       */\r\n      'drop-shadow-color': [{\r\n        'drop-shadow': scaleColor()\r\n      }],\r\n      /**\r\n       * Grayscale\r\n       * @see https://tailwindcss.com/docs/grayscale\r\n       */\r\n      grayscale: [{\r\n        grayscale: ['', isNumber, isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Hue Rotate\r\n       * @see https://tailwindcss.com/docs/hue-rotate\r\n       */\r\n      'hue-rotate': [{\r\n        'hue-rotate': [isNumber, isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Invert\r\n       * @see https://tailwindcss.com/docs/invert\r\n       */\r\n      invert: [{\r\n        invert: ['', isNumber, isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Saturate\r\n       * @see https://tailwindcss.com/docs/saturate\r\n       */\r\n      saturate: [{\r\n        saturate: [isNumber, isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Sepia\r\n       * @see https://tailwindcss.com/docs/sepia\r\n       */\r\n      sepia: [{\r\n        sepia: ['', isNumber, isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Backdrop Filter\r\n       * @see https://tailwindcss.com/docs/backdrop-filter\r\n       */\r\n      'backdrop-filter': [{\r\n        'backdrop-filter': [\r\n        // Deprecated since Tailwind CSS v3.0.0\r\n        '', 'none', isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Backdrop Blur\r\n       * @see https://tailwindcss.com/docs/backdrop-blur\r\n       */\r\n      'backdrop-blur': [{\r\n        'backdrop-blur': scaleBlur()\r\n      }],\r\n      /**\r\n       * Backdrop Brightness\r\n       * @see https://tailwindcss.com/docs/backdrop-brightness\r\n       */\r\n      'backdrop-brightness': [{\r\n        'backdrop-brightness': [isNumber, isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Backdrop Contrast\r\n       * @see https://tailwindcss.com/docs/backdrop-contrast\r\n       */\r\n      'backdrop-contrast': [{\r\n        'backdrop-contrast': [isNumber, isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Backdrop Grayscale\r\n       * @see https://tailwindcss.com/docs/backdrop-grayscale\r\n       */\r\n      'backdrop-grayscale': [{\r\n        'backdrop-grayscale': ['', isNumber, isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Backdrop Hue Rotate\r\n       * @see https://tailwindcss.com/docs/backdrop-hue-rotate\r\n       */\r\n      'backdrop-hue-rotate': [{\r\n        'backdrop-hue-rotate': [isNumber, isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Backdrop Invert\r\n       * @see https://tailwindcss.com/docs/backdrop-invert\r\n       */\r\n      'backdrop-invert': [{\r\n        'backdrop-invert': ['', isNumber, isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Backdrop Opacity\r\n       * @see https://tailwindcss.com/docs/backdrop-opacity\r\n       */\r\n      'backdrop-opacity': [{\r\n        'backdrop-opacity': [isNumber, isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Backdrop Saturate\r\n       * @see https://tailwindcss.com/docs/backdrop-saturate\r\n       */\r\n      'backdrop-saturate': [{\r\n        'backdrop-saturate': [isNumber, isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Backdrop Sepia\r\n       * @see https://tailwindcss.com/docs/backdrop-sepia\r\n       */\r\n      'backdrop-sepia': [{\r\n        'backdrop-sepia': ['', isNumber, isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      // --------------\r\n      // --- Tables ---\r\n      // --------------\r\n      /**\r\n       * Border Collapse\r\n       * @see https://tailwindcss.com/docs/border-collapse\r\n       */\r\n      'border-collapse': [{\r\n        border: ['collapse', 'separate']\r\n      }],\r\n      /**\r\n       * Border Spacing\r\n       * @see https://tailwindcss.com/docs/border-spacing\r\n       */\r\n      'border-spacing': [{\r\n        'border-spacing': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Border Spacing X\r\n       * @see https://tailwindcss.com/docs/border-spacing\r\n       */\r\n      'border-spacing-x': [{\r\n        'border-spacing-x': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Border Spacing Y\r\n       * @see https://tailwindcss.com/docs/border-spacing\r\n       */\r\n      'border-spacing-y': [{\r\n        'border-spacing-y': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Table Layout\r\n       * @see https://tailwindcss.com/docs/table-layout\r\n       */\r\n      'table-layout': [{\r\n        table: ['auto', 'fixed']\r\n      }],\r\n      /**\r\n       * Caption Side\r\n       * @see https://tailwindcss.com/docs/caption-side\r\n       */\r\n      caption: [{\r\n        caption: ['top', 'bottom']\r\n      }],\r\n      // ---------------------------------\r\n      // --- Transitions and Animation ---\r\n      // ---------------------------------\r\n      /**\r\n       * Transition Property\r\n       * @see https://tailwindcss.com/docs/transition-property\r\n       */\r\n      transition: [{\r\n        transition: ['', 'all', 'colors', 'opacity', 'shadow', 'transform', 'none', isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Transition Behavior\r\n       * @see https://tailwindcss.com/docs/transition-behavior\r\n       */\r\n      'transition-behavior': [{\r\n        transition: ['normal', 'discrete']\r\n      }],\r\n      /**\r\n       * Transition Duration\r\n       * @see https://tailwindcss.com/docs/transition-duration\r\n       */\r\n      duration: [{\r\n        duration: [isNumber, 'initial', isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Transition Timing Function\r\n       * @see https://tailwindcss.com/docs/transition-timing-function\r\n       */\r\n      ease: [{\r\n        ease: ['linear', 'initial', themeEase, isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Transition Delay\r\n       * @see https://tailwindcss.com/docs/transition-delay\r\n       */\r\n      delay: [{\r\n        delay: [isNumber, isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Animation\r\n       * @see https://tailwindcss.com/docs/animation\r\n       */\r\n      animate: [{\r\n        animate: ['none', themeAnimate, isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      // ------------------\r\n      // --- Transforms ---\r\n      // ------------------\r\n      /**\r\n       * Backface Visibility\r\n       * @see https://tailwindcss.com/docs/backface-visibility\r\n       */\r\n      backface: [{\r\n        backface: ['hidden', 'visible']\r\n      }],\r\n      /**\r\n       * Perspective\r\n       * @see https://tailwindcss.com/docs/perspective\r\n       */\r\n      perspective: [{\r\n        perspective: [themePerspective, isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Perspective Origin\r\n       * @see https://tailwindcss.com/docs/perspective-origin\r\n       */\r\n      'perspective-origin': [{\r\n        'perspective-origin': scalePositionWithArbitrary()\r\n      }],\r\n      /**\r\n       * Rotate\r\n       * @see https://tailwindcss.com/docs/rotate\r\n       */\r\n      rotate: [{\r\n        rotate: scaleRotate()\r\n      }],\r\n      /**\r\n       * Rotate X\r\n       * @see https://tailwindcss.com/docs/rotate\r\n       */\r\n      'rotate-x': [{\r\n        'rotate-x': scaleRotate()\r\n      }],\r\n      /**\r\n       * Rotate Y\r\n       * @see https://tailwindcss.com/docs/rotate\r\n       */\r\n      'rotate-y': [{\r\n        'rotate-y': scaleRotate()\r\n      }],\r\n      /**\r\n       * Rotate Z\r\n       * @see https://tailwindcss.com/docs/rotate\r\n       */\r\n      'rotate-z': [{\r\n        'rotate-z': scaleRotate()\r\n      }],\r\n      /**\r\n       * Scale\r\n       * @see https://tailwindcss.com/docs/scale\r\n       */\r\n      scale: [{\r\n        scale: scaleScale()\r\n      }],\r\n      /**\r\n       * Scale X\r\n       * @see https://tailwindcss.com/docs/scale\r\n       */\r\n      'scale-x': [{\r\n        'scale-x': scaleScale()\r\n      }],\r\n      /**\r\n       * Scale Y\r\n       * @see https://tailwindcss.com/docs/scale\r\n       */\r\n      'scale-y': [{\r\n        'scale-y': scaleScale()\r\n      }],\r\n      /**\r\n       * Scale Z\r\n       * @see https://tailwindcss.com/docs/scale\r\n       */\r\n      'scale-z': [{\r\n        'scale-z': scaleScale()\r\n      }],\r\n      /**\r\n       * Scale 3D\r\n       * @see https://tailwindcss.com/docs/scale\r\n       */\r\n      'scale-3d': ['scale-3d'],\r\n      /**\r\n       * Skew\r\n       * @see https://tailwindcss.com/docs/skew\r\n       */\r\n      skew: [{\r\n        skew: scaleSkew()\r\n      }],\r\n      /**\r\n       * Skew X\r\n       * @see https://tailwindcss.com/docs/skew\r\n       */\r\n      'skew-x': [{\r\n        'skew-x': scaleSkew()\r\n      }],\r\n      /**\r\n       * Skew Y\r\n       * @see https://tailwindcss.com/docs/skew\r\n       */\r\n      'skew-y': [{\r\n        'skew-y': scaleSkew()\r\n      }],\r\n      /**\r\n       * Transform\r\n       * @see https://tailwindcss.com/docs/transform\r\n       */\r\n      transform: [{\r\n        transform: [isArbitraryVariable, isArbitraryValue, '', 'none', 'gpu', 'cpu']\r\n      }],\r\n      /**\r\n       * Transform Origin\r\n       * @see https://tailwindcss.com/docs/transform-origin\r\n       */\r\n      'transform-origin': [{\r\n        origin: scalePositionWithArbitrary()\r\n      }],\r\n      /**\r\n       * Transform Style\r\n       * @see https://tailwindcss.com/docs/transform-style\r\n       */\r\n      'transform-style': [{\r\n        transform: ['3d', 'flat']\r\n      }],\r\n      /**\r\n       * Translate\r\n       * @see https://tailwindcss.com/docs/translate\r\n       */\r\n      translate: [{\r\n        translate: scaleTranslate()\r\n      }],\r\n      /**\r\n       * Translate X\r\n       * @see https://tailwindcss.com/docs/translate\r\n       */\r\n      'translate-x': [{\r\n        'translate-x': scaleTranslate()\r\n      }],\r\n      /**\r\n       * Translate Y\r\n       * @see https://tailwindcss.com/docs/translate\r\n       */\r\n      'translate-y': [{\r\n        'translate-y': scaleTranslate()\r\n      }],\r\n      /**\r\n       * Translate Z\r\n       * @see https://tailwindcss.com/docs/translate\r\n       */\r\n      'translate-z': [{\r\n        'translate-z': scaleTranslate()\r\n      }],\r\n      /**\r\n       * Translate None\r\n       * @see https://tailwindcss.com/docs/translate\r\n       */\r\n      'translate-none': ['translate-none'],\r\n      // ---------------------\r\n      // --- Interactivity ---\r\n      // ---------------------\r\n      /**\r\n       * Accent Color\r\n       * @see https://tailwindcss.com/docs/accent-color\r\n       */\r\n      accent: [{\r\n        accent: scaleColor()\r\n      }],\r\n      /**\r\n       * Appearance\r\n       * @see https://tailwindcss.com/docs/appearance\r\n       */\r\n      appearance: [{\r\n        appearance: ['none', 'auto']\r\n      }],\r\n      /**\r\n       * Caret Color\r\n       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities\r\n       */\r\n      'caret-color': [{\r\n        caret: scaleColor()\r\n      }],\r\n      /**\r\n       * Color Scheme\r\n       * @see https://tailwindcss.com/docs/color-scheme\r\n       */\r\n      'color-scheme': [{\r\n        scheme: ['normal', 'dark', 'light', 'light-dark', 'only-dark', 'only-light']\r\n      }],\r\n      /**\r\n       * Cursor\r\n       * @see https://tailwindcss.com/docs/cursor\r\n       */\r\n      cursor: [{\r\n        cursor: ['auto', 'default', 'pointer', 'wait', 'text', 'move', 'help', 'not-allowed', 'none', 'context-menu', 'progress', 'cell', 'crosshair', 'vertical-text', 'alias', 'copy', 'no-drop', 'grab', 'grabbing', 'all-scroll', 'col-resize', 'row-resize', 'n-resize', 'e-resize', 's-resize', 'w-resize', 'ne-resize', 'nw-resize', 'se-resize', 'sw-resize', 'ew-resize', 'ns-resize', 'nesw-resize', 'nwse-resize', 'zoom-in', 'zoom-out', isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      /**\r\n       * Field Sizing\r\n       * @see https://tailwindcss.com/docs/field-sizing\r\n       */\r\n      'field-sizing': [{\r\n        'field-sizing': ['fixed', 'content']\r\n      }],\r\n      /**\r\n       * Pointer Events\r\n       * @see https://tailwindcss.com/docs/pointer-events\r\n       */\r\n      'pointer-events': [{\r\n        'pointer-events': ['auto', 'none']\r\n      }],\r\n      /**\r\n       * Resize\r\n       * @see https://tailwindcss.com/docs/resize\r\n       */\r\n      resize: [{\r\n        resize: ['none', '', 'y', 'x']\r\n      }],\r\n      /**\r\n       * Scroll Behavior\r\n       * @see https://tailwindcss.com/docs/scroll-behavior\r\n       */\r\n      'scroll-behavior': [{\r\n        scroll: ['auto', 'smooth']\r\n      }],\r\n      /**\r\n       * Scroll Margin\r\n       * @see https://tailwindcss.com/docs/scroll-margin\r\n       */\r\n      'scroll-m': [{\r\n        'scroll-m': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Scroll Margin X\r\n       * @see https://tailwindcss.com/docs/scroll-margin\r\n       */\r\n      'scroll-mx': [{\r\n        'scroll-mx': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Scroll Margin Y\r\n       * @see https://tailwindcss.com/docs/scroll-margin\r\n       */\r\n      'scroll-my': [{\r\n        'scroll-my': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Scroll Margin Start\r\n       * @see https://tailwindcss.com/docs/scroll-margin\r\n       */\r\n      'scroll-ms': [{\r\n        'scroll-ms': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Scroll Margin End\r\n       * @see https://tailwindcss.com/docs/scroll-margin\r\n       */\r\n      'scroll-me': [{\r\n        'scroll-me': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Scroll Margin Top\r\n       * @see https://tailwindcss.com/docs/scroll-margin\r\n       */\r\n      'scroll-mt': [{\r\n        'scroll-mt': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Scroll Margin Right\r\n       * @see https://tailwindcss.com/docs/scroll-margin\r\n       */\r\n      'scroll-mr': [{\r\n        'scroll-mr': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Scroll Margin Bottom\r\n       * @see https://tailwindcss.com/docs/scroll-margin\r\n       */\r\n      'scroll-mb': [{\r\n        'scroll-mb': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Scroll Margin Left\r\n       * @see https://tailwindcss.com/docs/scroll-margin\r\n       */\r\n      'scroll-ml': [{\r\n        'scroll-ml': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Scroll Padding\r\n       * @see https://tailwindcss.com/docs/scroll-padding\r\n       */\r\n      'scroll-p': [{\r\n        'scroll-p': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Scroll Padding X\r\n       * @see https://tailwindcss.com/docs/scroll-padding\r\n       */\r\n      'scroll-px': [{\r\n        'scroll-px': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Scroll Padding Y\r\n       * @see https://tailwindcss.com/docs/scroll-padding\r\n       */\r\n      'scroll-py': [{\r\n        'scroll-py': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Scroll Padding Start\r\n       * @see https://tailwindcss.com/docs/scroll-padding\r\n       */\r\n      'scroll-ps': [{\r\n        'scroll-ps': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Scroll Padding End\r\n       * @see https://tailwindcss.com/docs/scroll-padding\r\n       */\r\n      'scroll-pe': [{\r\n        'scroll-pe': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Scroll Padding Top\r\n       * @see https://tailwindcss.com/docs/scroll-padding\r\n       */\r\n      'scroll-pt': [{\r\n        'scroll-pt': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Scroll Padding Right\r\n       * @see https://tailwindcss.com/docs/scroll-padding\r\n       */\r\n      'scroll-pr': [{\r\n        'scroll-pr': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Scroll Padding Bottom\r\n       * @see https://tailwindcss.com/docs/scroll-padding\r\n       */\r\n      'scroll-pb': [{\r\n        'scroll-pb': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Scroll Padding Left\r\n       * @see https://tailwindcss.com/docs/scroll-padding\r\n       */\r\n      'scroll-pl': [{\r\n        'scroll-pl': scaleUnambiguousSpacing()\r\n      }],\r\n      /**\r\n       * Scroll Snap Align\r\n       * @see https://tailwindcss.com/docs/scroll-snap-align\r\n       */\r\n      'snap-align': [{\r\n        snap: ['start', 'end', 'center', 'align-none']\r\n      }],\r\n      /**\r\n       * Scroll Snap Stop\r\n       * @see https://tailwindcss.com/docs/scroll-snap-stop\r\n       */\r\n      'snap-stop': [{\r\n        snap: ['normal', 'always']\r\n      }],\r\n      /**\r\n       * Scroll Snap Type\r\n       * @see https://tailwindcss.com/docs/scroll-snap-type\r\n       */\r\n      'snap-type': [{\r\n        snap: ['none', 'x', 'y', 'both']\r\n      }],\r\n      /**\r\n       * Scroll Snap Type Strictness\r\n       * @see https://tailwindcss.com/docs/scroll-snap-type\r\n       */\r\n      'snap-strictness': [{\r\n        snap: ['mandatory', 'proximity']\r\n      }],\r\n      /**\r\n       * Touch Action\r\n       * @see https://tailwindcss.com/docs/touch-action\r\n       */\r\n      touch: [{\r\n        touch: ['auto', 'none', 'manipulation']\r\n      }],\r\n      /**\r\n       * Touch Action X\r\n       * @see https://tailwindcss.com/docs/touch-action\r\n       */\r\n      'touch-x': [{\r\n        'touch-pan': ['x', 'left', 'right']\r\n      }],\r\n      /**\r\n       * Touch Action Y\r\n       * @see https://tailwindcss.com/docs/touch-action\r\n       */\r\n      'touch-y': [{\r\n        'touch-pan': ['y', 'up', 'down']\r\n      }],\r\n      /**\r\n       * Touch Action Pinch Zoom\r\n       * @see https://tailwindcss.com/docs/touch-action\r\n       */\r\n      'touch-pz': ['touch-pinch-zoom'],\r\n      /**\r\n       * User Select\r\n       * @see https://tailwindcss.com/docs/user-select\r\n       */\r\n      select: [{\r\n        select: ['none', 'text', 'all', 'auto']\r\n      }],\r\n      /**\r\n       * Will Change\r\n       * @see https://tailwindcss.com/docs/will-change\r\n       */\r\n      'will-change': [{\r\n        'will-change': ['auto', 'scroll', 'contents', 'transform', isArbitraryVariable, isArbitraryValue]\r\n      }],\r\n      // -----------\r\n      // --- SVG ---\r\n      // -----------\r\n      /**\r\n       * Fill\r\n       * @see https://tailwindcss.com/docs/fill\r\n       */\r\n      fill: [{\r\n        fill: ['none', ...scaleColor()]\r\n      }],\r\n      /**\r\n       * Stroke Width\r\n       * @see https://tailwindcss.com/docs/stroke-width\r\n       */\r\n      'stroke-w': [{\r\n        stroke: [isNumber, isArbitraryVariableLength, isArbitraryLength, isArbitraryNumber]\r\n      }],\r\n      /**\r\n       * Stroke\r\n       * @see https://tailwindcss.com/docs/stroke\r\n       */\r\n      stroke: [{\r\n        stroke: ['none', ...scaleColor()]\r\n      }],\r\n      // ---------------------\r\n      // --- Accessibility ---\r\n      // ---------------------\r\n      /**\r\n       * Forced Color Adjust\r\n       * @see https://tailwindcss.com/docs/forced-color-adjust\r\n       */\r\n      'forced-color-adjust': [{\r\n        'forced-color-adjust': ['auto', 'none']\r\n      }]\r\n    },\r\n    conflictingClassGroups: {\r\n      overflow: ['overflow-x', 'overflow-y'],\r\n      overscroll: ['overscroll-x', 'overscroll-y'],\r\n      inset: ['inset-x', 'inset-y', 'start', 'end', 'top', 'right', 'bottom', 'left'],\r\n      'inset-x': ['right', 'left'],\r\n      'inset-y': ['top', 'bottom'],\r\n      flex: ['basis', 'grow', 'shrink'],\r\n      gap: ['gap-x', 'gap-y'],\r\n      p: ['px', 'py', 'ps', 'pe', 'pt', 'pr', 'pb', 'pl'],\r\n      px: ['pr', 'pl'],\r\n      py: ['pt', 'pb'],\r\n      m: ['mx', 'my', 'ms', 'me', 'mt', 'mr', 'mb', 'ml'],\r\n      mx: ['mr', 'ml'],\r\n      my: ['mt', 'mb'],\r\n      size: ['w', 'h'],\r\n      'font-size': ['leading'],\r\n      'fvn-normal': ['fvn-ordinal', 'fvn-slashed-zero', 'fvn-figure', 'fvn-spacing', 'fvn-fraction'],\r\n      'fvn-ordinal': ['fvn-normal'],\r\n      'fvn-slashed-zero': ['fvn-normal'],\r\n      'fvn-figure': ['fvn-normal'],\r\n      'fvn-spacing': ['fvn-normal'],\r\n      'fvn-fraction': ['fvn-normal'],\r\n      'line-clamp': ['display', 'overflow'],\r\n      rounded: ['rounded-s', 'rounded-e', 'rounded-t', 'rounded-r', 'rounded-b', 'rounded-l', 'rounded-ss', 'rounded-se', 'rounded-ee', 'rounded-es', 'rounded-tl', 'rounded-tr', 'rounded-br', 'rounded-bl'],\r\n      'rounded-s': ['rounded-ss', 'rounded-es'],\r\n      'rounded-e': ['rounded-se', 'rounded-ee'],\r\n      'rounded-t': ['rounded-tl', 'rounded-tr'],\r\n      'rounded-r': ['rounded-tr', 'rounded-br'],\r\n      'rounded-b': ['rounded-br', 'rounded-bl'],\r\n      'rounded-l': ['rounded-tl', 'rounded-bl'],\r\n      'border-spacing': ['border-spacing-x', 'border-spacing-y'],\r\n      'border-w': ['border-w-x', 'border-w-y', 'border-w-s', 'border-w-e', 'border-w-t', 'border-w-r', 'border-w-b', 'border-w-l'],\r\n      'border-w-x': ['border-w-r', 'border-w-l'],\r\n      'border-w-y': ['border-w-t', 'border-w-b'],\r\n      'border-color': ['border-color-x', 'border-color-y', 'border-color-s', 'border-color-e', 'border-color-t', 'border-color-r', 'border-color-b', 'border-color-l'],\r\n      'border-color-x': ['border-color-r', 'border-color-l'],\r\n      'border-color-y': ['border-color-t', 'border-color-b'],\r\n      translate: ['translate-x', 'translate-y', 'translate-none'],\r\n      'translate-none': ['translate', 'translate-x', 'translate-y', 'translate-z'],\r\n      'scroll-m': ['scroll-mx', 'scroll-my', 'scroll-ms', 'scroll-me', 'scroll-mt', 'scroll-mr', 'scroll-mb', 'scroll-ml'],\r\n      'scroll-mx': ['scroll-mr', 'scroll-ml'],\r\n      'scroll-my': ['scroll-mt', 'scroll-mb'],\r\n      'scroll-p': ['scroll-px', 'scroll-py', 'scroll-ps', 'scroll-pe', 'scroll-pt', 'scroll-pr', 'scroll-pb', 'scroll-pl'],\r\n      'scroll-px': ['scroll-pr', 'scroll-pl'],\r\n      'scroll-py': ['scroll-pt', 'scroll-pb'],\r\n      touch: ['touch-x', 'touch-y', 'touch-pz'],\r\n      'touch-x': ['touch'],\r\n      'touch-y': ['touch'],\r\n      'touch-pz': ['touch']\r\n    },\r\n    conflictingClassGroupModifiers: {\r\n      'font-size': ['leading']\r\n    },\r\n    orderSensitiveModifiers: ['*', '**', 'after', 'backdrop', 'before', 'details-content', 'file', 'first-letter', 'first-line', 'marker', 'placeholder', 'selection']\r\n  };\r\n};\r\n\r\n/**\r\n * @param baseConfig Config where other config will be merged into. This object will be mutated.\r\n * @param configExtension Partial config to merge into the `baseConfig`.\r\n */\r\nconst mergeConfigs = (baseConfig, {\r\n  cacheSize,\r\n  prefix,\r\n  experimentalParseClassName,\r\n  extend = {},\r\n  override = {}\r\n}) => {\r\n  overrideProperty(baseConfig, 'cacheSize', cacheSize);\r\n  overrideProperty(baseConfig, 'prefix', prefix);\r\n  overrideProperty(baseConfig, 'experimentalParseClassName', experimentalParseClassName);\r\n  overrideConfigProperties(baseConfig.theme, override.theme);\r\n  overrideConfigProperties(baseConfig.classGroups, override.classGroups);\r\n  overrideConfigProperties(baseConfig.conflictingClassGroups, override.conflictingClassGroups);\r\n  overrideConfigProperties(baseConfig.conflictingClassGroupModifiers, override.conflictingClassGroupModifiers);\r\n  overrideProperty(baseConfig, 'orderSensitiveModifiers', override.orderSensitiveModifiers);\r\n  mergeConfigProperties(baseConfig.theme, extend.theme);\r\n  mergeConfigProperties(baseConfig.classGroups, extend.classGroups);\r\n  mergeConfigProperties(baseConfig.conflictingClassGroups, extend.conflictingClassGroups);\r\n  mergeConfigProperties(baseConfig.conflictingClassGroupModifiers, extend.conflictingClassGroupModifiers);\r\n  mergeArrayProperties(baseConfig, extend, 'orderSensitiveModifiers');\r\n  return baseConfig;\r\n};\r\nconst overrideProperty = (baseObject, overrideKey, overrideValue) => {\r\n  if (overrideValue !== undefined) {\r\n    baseObject[overrideKey] = overrideValue;\r\n  }\r\n};\r\nconst overrideConfigProperties = (baseObject, overrideObject) => {\r\n  if (overrideObject) {\r\n    for (const key in overrideObject) {\r\n      overrideProperty(baseObject, key, overrideObject[key]);\r\n    }\r\n  }\r\n};\r\nconst mergeConfigProperties = (baseObject, mergeObject) => {\r\n  if (mergeObject) {\r\n    for (const key in mergeObject) {\r\n      mergeArrayProperties(baseObject, mergeObject, key);\r\n    }\r\n  }\r\n};\r\nconst mergeArrayProperties = (baseObject, mergeObject, key) => {\r\n  const mergeValue = mergeObject[key];\r\n  if (mergeValue !== undefined) {\r\n    baseObject[key] = baseObject[key] ? baseObject[key].concat(mergeValue) : mergeValue;\r\n  }\r\n};\r\nconst extendTailwindMerge = (configExtension, ...createConfig) => typeof configExtension === 'function' ? createTailwindMerge(getDefaultConfig, configExtension, ...createConfig) : createTailwindMerge(() => mergeConfigs(getDefaultConfig(), configExtension), ...createConfig);\r\nconst twMerge = /*#__PURE__*/createTailwindMerge(getDefaultConfig);\r\n\r\n//# sourceMappingURL=bundle-mjs.mjs.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tailwind-merge/dist/bundle-mjs.mjs\n");

/***/ })

};
;