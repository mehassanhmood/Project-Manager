"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/services/apis.ts":
/*!******************************!*\
  !*** ./app/services/apis.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TaskApiService: function() { return /* binding */ TaskApiService; }\n/* harmony export */ });\n// here we will have apis for fetching, making, deleting, starting, and completing the task.\nclass TaskApiService {\n    async fetchTasks() {\n        try {\n            const response = await fetch(\"\".concat(this.baseUrl, \"/tasks\"));\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"Error fetching tasks:\", error);\n            throw error;\n        }\n    }\n    async fetchAllTasks() {\n        try {\n            // Use the new endpoint that gets all tasks from all pages\n            const baseUrl = this.baseUrl.split(\"/pages/\")[0]; // Get http://localhost:8000/api/v1\n            const response = await fetch(\"\".concat(baseUrl, \"/tasks/all\"));\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const tasks = await response.json();\n            return tasks;\n        } catch (error) {\n            console.error(\"Error fetching all tasks:\", error);\n            throw error;\n        }\n    }\n    async createTask(taskData) {\n        try {\n            const response = await fetch(\"\".concat(this.baseUrl, \"/tasks\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(taskData)\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                console.error(\"Server error:\", errorData);\n                throw new Error(\"Failed to make a new task: \".concat(response.status));\n            }\n        } catch (error) {\n            console.error(\"Error making the task: \", error);\n            throw error;\n        }\n    }\n    async startTask(taskId) {\n        try {\n            const response = await fetch(\"\".concat(this.baseUrl, \"/tasks/\").concat(taskId, \"/start\"), {\n                method: \"PUT\"\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to start task: \".concat(response.status));\n            }\n        } catch (error) {\n            console.error(\"Error starting task:\", error);\n            throw error;\n        }\n    }\n    async completeTask(taskId) {\n        try {\n            const response = await fetch(\"\".concat(this.baseUrl, \"/tasks/\").concat(taskId, \"/complete\"), {\n                method: \"PUT\"\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to complete task: \".concat(response.status));\n            }\n        } catch (error) {\n            console.error(\"Error completing task:\", error);\n            throw error;\n        }\n    }\n    async deleteTask(taskId) {\n        try {\n            const response = await fetch(\"\".concat(this.baseUrl, \"/tasks/\").concat(taskId), {\n                method: \"DELETE\"\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to delete task: \".concat(response.status));\n            }\n        } catch (error) {\n            console.error(\"Error deleting task:\", error);\n            throw error;\n        }\n    }\n    // Subtask API methods\n    async createSubtask(taskId, subtask) {\n        try {\n            const response = await fetch(\"\".concat(this.baseUrl.replace(\"/pages/\" + this.baseUrl.split(\"/\").pop(), \"\"), \"/tasks/\").concat(taskId, \"/subtasks\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(subtask)\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to create subtask: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"Error creating subtask:\", error);\n            throw error;\n        }\n    }\n    async updateSubtaskStatus(subtaskId, status) {\n        try {\n            const response = await fetch(\"\".concat(this.baseUrl.replace(\"/pages/\" + this.baseUrl.split(\"/\").pop(), \"\"), \"/subtasks/\").concat(subtaskId, \"/status\"), {\n                method: \"PUT\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    status\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to update subtask status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"Error updating subtask status:\", error);\n            throw error;\n        }\n    }\n    async deleteSubtask(subtaskId) {\n        try {\n            const response = await fetch(\"\".concat(this.baseUrl.replace(\"/pages/\" + this.baseUrl.split(\"/\").pop(), \"\"), \"/subtasks/\").concat(subtaskId), {\n                method: \"DELETE\"\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to delete subtask: \".concat(response.status));\n            }\n        } catch (error) {\n            console.error(\"Error deleting subtask:\", error);\n            throw error;\n        }\n    }\n    constructor(baseUrl = \"http://localhost:8000/api/v1\", pageName = \"Home\"){\n        this.baseUrl = \"\".concat(baseUrl, \"/pages/\").concat(pageName);\n    }\n}\n\n\n;\r\n    // Wrapped in an IIFE to avoid polluting the global scope\r\n    ;\r\n    (function () {\r\n        var _a, _b;\r\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\r\n        // to extract CSS. For backwards compatibility, we need to check we're in a\r\n        // browser context before continuing.\r\n        if (typeof self !== 'undefined' &&\r\n            // AMP / No-JS mode does not inject these helpers:\r\n            '$RefreshHelpers$' in self) {\r\n            // @ts-ignore __webpack_module__ is global\r\n            var currentExports = module.exports;\r\n            // @ts-ignore __webpack_module__ is global\r\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\r\n            // This cannot happen in MainTemplate because the exports mismatch between\r\n            // templating and execution.\r\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\r\n            // A module can be accepted automatically based on its exports, e.g. when\r\n            // it is a Refresh Boundary.\r\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\r\n                // Save the previous exports signature on update so we can compare the boundary\r\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\r\n                module.hot.dispose(function (data) {\r\n                    data.prevSignature =\r\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\r\n                });\r\n                // Unconditionally accept an update to this module, we'll check if it's\r\n                // still a Refresh Boundary later.\r\n                // @ts-ignore importMeta is replaced in the loader\r\n                module.hot.accept();\r\n                // This field is set when the previous version of this module was a\r\n                // Refresh Boundary, letting us know we need to check for invalidation or\r\n                // enqueue an update.\r\n                if (prevSignature !== null) {\r\n                    // A boundary can become ineligible if its exports are incompatible\r\n                    // with the previous exports.\r\n                    //\r\n                    // For example, if you add/remove/change exports, we'll want to\r\n                    // re-execute the importing modules, and force those components to\r\n                    // re-render. Similarly, if you convert a class component to a\r\n                    // function, we want to invalidate the boundary.\r\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\r\n                        module.hot.invalidate();\r\n                    }\r\n                    else {\r\n                        self.$RefreshHelpers$.scheduleUpdate();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Since we just executed the code for the module, it's possible that the\r\n                // new exports made it ineligible for being a boundary.\r\n                // We only care about the case when we were _previously_ a boundary,\r\n                // because we already accepted this update (accidental side effect).\r\n                var isNoLongerABoundary = prevSignature !== null;\r\n                if (isNoLongerABoundary) {\r\n                    module.hot.invalidate();\r\n                }\r\n            }\r\n        }\r\n    })();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/services/apis.ts\n"));

/***/ })

});